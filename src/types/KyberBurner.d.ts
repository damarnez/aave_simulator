/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface KyberBurnerInterface extends ethers.utils.Interface {
  functions: {
    "KYBER_ETH_MOCK_ADDRESS()": FunctionFragment;
    "MAX_UINT()": FunctionFragment;
    "MIN_CONVERSION_RATE()": FunctionFragment;
    "isBurnAvailable()": FunctionFragment;
    "kyberProxy()": FunctionFragment;
    "tokenToBurn()": FunctionFragment;
    "tradeAndBurn(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "KYBER_ETH_MOCK_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_UINT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MIN_CONVERSION_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBurnAvailable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "kyberProxy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenToBurn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradeAndBurn",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "KYBER_ETH_MOCK_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_UINT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MIN_CONVERSION_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBurnAvailable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "kyberProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenToBurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeAndBurn",
    data: BytesLike
  ): Result;

  events: {
    "Burn(uint256)": EventFragment;
    "Setup(address,bool,address)": EventFragment;
    "Trade(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Setup"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
}

export class KyberBurner extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: KyberBurnerInterface;

  functions: {
    KYBER_ETH_MOCK_ADDRESS(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "KYBER_ETH_MOCK_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    MAX_UINT(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MAX_UINT()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MIN_CONVERSION_RATE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MIN_CONVERSION_RATE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    isBurnAvailable(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isBurnAvailable()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    kyberProxy(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "kyberProxy()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    tokenToBurn(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "tokenToBurn()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Function to trade from the _from token or ETH, to the tokenToBurn token  - Callable without ACR, as the trade-and-burn logic is fixed
     * @param _amount The amount to trade
     * @param _from The token to trade from
     */
    tradeAndBurn(
      _from: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * Function to trade from the _from token or ETH, to the tokenToBurn token  - Callable without ACR, as the trade-and-burn logic is fixed
     * @param _amount The amount to trade
     * @param _from The token to trade from
     */
    "tradeAndBurn(address,uint256)"(
      _from: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  KYBER_ETH_MOCK_ADDRESS(overrides?: CallOverrides): Promise<string>;

  "KYBER_ETH_MOCK_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

  MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_UINT()"(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_CONVERSION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  "MIN_CONVERSION_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

  isBurnAvailable(overrides?: CallOverrides): Promise<boolean>;

  "isBurnAvailable()"(overrides?: CallOverrides): Promise<boolean>;

  kyberProxy(overrides?: CallOverrides): Promise<string>;

  "kyberProxy()"(overrides?: CallOverrides): Promise<string>;

  tokenToBurn(overrides?: CallOverrides): Promise<string>;

  "tokenToBurn()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Function to trade from the _from token or ETH, to the tokenToBurn token  - Callable without ACR, as the trade-and-burn logic is fixed
   * @param _amount The amount to trade
   * @param _from The token to trade from
   */
  tradeAndBurn(
    _from: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * Function to trade from the _from token or ETH, to the tokenToBurn token  - Callable without ACR, as the trade-and-burn logic is fixed
   * @param _amount The amount to trade
   * @param _from The token to trade from
   */
  "tradeAndBurn(address,uint256)"(
    _from: string,
    _amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    KYBER_ETH_MOCK_ADDRESS(overrides?: CallOverrides): Promise<string>;

    "KYBER_ETH_MOCK_ADDRESS()"(overrides?: CallOverrides): Promise<string>;

    MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_UINT()"(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_CONVERSION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_CONVERSION_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    isBurnAvailable(overrides?: CallOverrides): Promise<boolean>;

    "isBurnAvailable()"(overrides?: CallOverrides): Promise<boolean>;

    kyberProxy(overrides?: CallOverrides): Promise<string>;

    "kyberProxy()"(overrides?: CallOverrides): Promise<string>;

    tokenToBurn(overrides?: CallOverrides): Promise<string>;

    "tokenToBurn()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Function to trade from the _from token or ETH, to the tokenToBurn token  - Callable without ACR, as the trade-and-burn logic is fixed
     * @param _amount The amount to trade
     * @param _from The token to trade from
     */
    tradeAndBurn(
      _from: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Function to trade from the _from token or ETH, to the tokenToBurn token  - Callable without ACR, as the trade-and-burn logic is fixed
     * @param _amount The amount to trade
     * @param _from The token to trade from
     */
    "tradeAndBurn(address,uint256)"(
      _from: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Burn(amount: null): EventFilter;

    Setup(
      tokenToBurn: null,
      isBurnAvailable: null,
      kyberProxy: null
    ): EventFilter;

    Trade(from: string | null, fromAmount: null, toAmount: null): EventFilter;
  };

  estimateGas: {
    KYBER_ETH_MOCK_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    "KYBER_ETH_MOCK_ADDRESS()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_UINT(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_UINT()"(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_CONVERSION_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    "MIN_CONVERSION_RATE()"(overrides?: CallOverrides): Promise<BigNumber>;

    isBurnAvailable(overrides?: CallOverrides): Promise<BigNumber>;

    "isBurnAvailable()"(overrides?: CallOverrides): Promise<BigNumber>;

    kyberProxy(overrides?: CallOverrides): Promise<BigNumber>;

    "kyberProxy()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenToBurn(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenToBurn()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Function to trade from the _from token or ETH, to the tokenToBurn token  - Callable without ACR, as the trade-and-burn logic is fixed
     * @param _amount The amount to trade
     * @param _from The token to trade from
     */
    tradeAndBurn(
      _from: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * Function to trade from the _from token or ETH, to the tokenToBurn token  - Callable without ACR, as the trade-and-burn logic is fixed
     * @param _amount The amount to trade
     * @param _from The token to trade from
     */
    "tradeAndBurn(address,uint256)"(
      _from: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    KYBER_ETH_MOCK_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "KYBER_ETH_MOCK_ADDRESS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_UINT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_UINT()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_CONVERSION_RATE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MIN_CONVERSION_RATE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBurnAvailable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isBurnAvailable()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    kyberProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "kyberProxy()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenToBurn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenToBurn()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Function to trade from the _from token or ETH, to the tokenToBurn token  - Callable without ACR, as the trade-and-burn logic is fixed
     * @param _amount The amount to trade
     * @param _from The token to trade from
     */
    tradeAndBurn(
      _from: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Function to trade from the _from token or ETH, to the tokenToBurn token  - Callable without ACR, as the trade-and-burn logic is fixed
     * @param _amount The amount to trade
     * @param _from The token to trade from
     */
    "tradeAndBurn(address,uint256)"(
      _from: string,
      _amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
