/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface TokenDistributorInterface extends ethers.utils.Interface {
  functions: {
    "DISTRIBUTION_BASE()": FunctionFragment;
    "distribute(address[])": FunctionFragment;
    "getDistribution()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DISTRIBUTION_BASE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distribute",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistribution",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DISTRIBUTION_BASE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "distribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDistribution",
    data: BytesLike
  ): Result;

  events: {
    "Distributed(address,uint256,uint256)": EventFragment;
    "DistributionUpdated(address[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Distributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributionUpdated"): EventFragment;
}

export class TokenDistributor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: TokenDistributorInterface;

  functions: {
    DISTRIBUTION_BASE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "DISTRIBUTION_BASE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    /**
     * Distributes a list of _tokens balances in this contract, depending on the distribution
     * @param _tokens list of ERC20 tokens to distribute
     */
    distribute(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Distributes a list of _tokens balances in this contract, depending on the distribution
     * @param _tokens list of ERC20 tokens to distribute
     */
    "distribute(address[])"(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Returns the receivers and percentages of the contract Distribution
     * @returns receivers array of addresses and percentages array on uints
     */
    getDistribution(
      overrides?: CallOverrides
    ): Promise<{
      receivers: string[];
      percentages: BigNumber[];
      0: string[];
      1: BigNumber[];
    }>;

    /**
     * Returns the receivers and percentages of the contract Distribution
     * @returns receivers array of addresses and percentages array on uints
     */
    "getDistribution()"(
      overrides?: CallOverrides
    ): Promise<{
      receivers: string[];
      percentages: BigNumber[];
      0: string[];
      1: BigNumber[];
    }>;
  };

  DISTRIBUTION_BASE(overrides?: CallOverrides): Promise<BigNumber>;

  "DISTRIBUTION_BASE()"(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Distributes a list of _tokens balances in this contract, depending on the distribution
   * @param _tokens list of ERC20 tokens to distribute
   */
  distribute(
    _tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Distributes a list of _tokens balances in this contract, depending on the distribution
   * @param _tokens list of ERC20 tokens to distribute
   */
  "distribute(address[])"(
    _tokens: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Returns the receivers and percentages of the contract Distribution
   * @returns receivers array of addresses and percentages array on uints
   */
  getDistribution(
    overrides?: CallOverrides
  ): Promise<{
    receivers: string[];
    percentages: BigNumber[];
    0: string[];
    1: BigNumber[];
  }>;

  /**
   * Returns the receivers and percentages of the contract Distribution
   * @returns receivers array of addresses and percentages array on uints
   */
  "getDistribution()"(
    overrides?: CallOverrides
  ): Promise<{
    receivers: string[];
    percentages: BigNumber[];
    0: string[];
    1: BigNumber[];
  }>;

  callStatic: {
    DISTRIBUTION_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    "DISTRIBUTION_BASE()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Distributes a list of _tokens balances in this contract, depending on the distribution
     * @param _tokens list of ERC20 tokens to distribute
     */
    distribute(_tokens: string[], overrides?: CallOverrides): Promise<void>;

    /**
     * Distributes a list of _tokens balances in this contract, depending on the distribution
     * @param _tokens list of ERC20 tokens to distribute
     */
    "distribute(address[])"(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Returns the receivers and percentages of the contract Distribution
     * @returns receivers array of addresses and percentages array on uints
     */
    getDistribution(
      overrides?: CallOverrides
    ): Promise<{
      receivers: string[];
      percentages: BigNumber[];
      0: string[];
      1: BigNumber[];
    }>;

    /**
     * Returns the receivers and percentages of the contract Distribution
     * @returns receivers array of addresses and percentages array on uints
     */
    "getDistribution()"(
      overrides?: CallOverrides
    ): Promise<{
      receivers: string[];
      percentages: BigNumber[];
      0: string[];
      1: BigNumber[];
    }>;
  };

  filters: {
    Distributed(receiver: null, percentage: null, amount: null): EventFilter;

    DistributionUpdated(receivers: null, percentages: null): EventFilter;
  };

  estimateGas: {
    DISTRIBUTION_BASE(overrides?: CallOverrides): Promise<BigNumber>;

    "DISTRIBUTION_BASE()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Distributes a list of _tokens balances in this contract, depending on the distribution
     * @param _tokens list of ERC20 tokens to distribute
     */
    distribute(_tokens: string[], overrides?: Overrides): Promise<BigNumber>;

    /**
     * Distributes a list of _tokens balances in this contract, depending on the distribution
     * @param _tokens list of ERC20 tokens to distribute
     */
    "distribute(address[])"(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Returns the receivers and percentages of the contract Distribution
     * @returns receivers array of addresses and percentages array on uints
     */
    getDistribution(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the receivers and percentages of the contract Distribution
     * @returns receivers array of addresses and percentages array on uints
     */
    "getDistribution()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DISTRIBUTION_BASE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DISTRIBUTION_BASE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Distributes a list of _tokens balances in this contract, depending on the distribution
     * @param _tokens list of ERC20 tokens to distribute
     */
    distribute(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Distributes a list of _tokens balances in this contract, depending on the distribution
     * @param _tokens list of ERC20 tokens to distribute
     */
    "distribute(address[])"(
      _tokens: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the receivers and percentages of the contract Distribution
     * @returns receivers array of addresses and percentages array on uints
     */
    getDistribution(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the receivers and percentages of the contract Distribution
     * @returns receivers array of addresses and percentages array on uints
     */
    "getDistribution()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
