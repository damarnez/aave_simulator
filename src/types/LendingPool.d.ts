/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LendingPoolInterface extends ethers.utils.Interface {
  functions: {
    "LENDINGPOOL_REVISION()": FunctionFragment;
    "UINT_MAX_VALUE()": FunctionFragment;
    "addressesProvider()": FunctionFragment;
    "core()": FunctionFragment;
    "dataProvider()": FunctionFragment;
    "parametersProvider()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "deposit(address,uint256,uint16)": FunctionFragment;
    "redeemUnderlying(address,address,uint256,uint256)": FunctionFragment;
    "borrow(address,uint256,uint256,uint16)": FunctionFragment;
    "repay(address,uint256,address)": FunctionFragment;
    "swapBorrowRateMode(address)": FunctionFragment;
    "rebalanceStableBorrowRate(address,address)": FunctionFragment;
    "setUserUseReserveAsCollateral(address,bool)": FunctionFragment;
    "liquidationCall(address,address,address,uint256,bool)": FunctionFragment;
    "flashLoan(address,address,uint256,bytes)": FunctionFragment;
    "getReserveConfigurationData(address)": FunctionFragment;
    "getReserveData(address)": FunctionFragment;
    "getUserAccountData(address)": FunctionFragment;
    "getUserReserveData(address,address)": FunctionFragment;
    "getReserves()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "LENDINGPOOL_REVISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UINT_MAX_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dataProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parametersProvider",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlying",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapBorrowRateMode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceStableBorrowRate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserUseReserveAsCollateral",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationCall",
    values: [string, string, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveConfigurationData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccountData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReserveData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "LENDINGPOOL_REVISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UINT_MAX_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parametersProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapBorrowRateMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceStableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserUseReserveAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReserveConfigurationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;

  events: {
    "Borrow(address,address,uint256,uint256,uint256,uint256,uint256,uint16,uint256)": EventFragment;
    "Deposit(address,address,uint256,uint16,uint256)": EventFragment;
    "FlashLoan(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "LiquidationCall(address,address,address,uint256,uint256,uint256,address,bool,uint256)": EventFragment;
    "OriginationFeeLiquidated(address,address,address,uint256,uint256,uint256)": EventFragment;
    "RebalanceStableBorrowRate(address,address,uint256,uint256,uint256)": EventFragment;
    "RedeemUnderlying(address,address,uint256,uint256)": EventFragment;
    "Repay(address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "ReserveUsedAsCollateralDisabled(address,address)": EventFragment;
    "ReserveUsedAsCollateralEnabled(address,address)": EventFragment;
    "Swap(address,address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidationCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OriginationFeeLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalanceStableBorrowRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemUnderlying"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveUsedAsCollateralDisabled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveUsedAsCollateralEnabled"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export class LendingPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LendingPoolInterface;

  functions: {
    LENDINGPOOL_REVISION(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "LENDINGPOOL_REVISION()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    UINT_MAX_VALUE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "UINT_MAX_VALUE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    addressesProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "addressesProvider()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    core(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "core()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    dataProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "dataProvider()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    parametersProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "parametersProvider()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * this function is invoked by the proxy contract when the LendingPool contract is added to the AddressesProvider.
     * @param _addressesProvider the address of the LendingPoolAddressesProvider registry*
     */
    initialize(
      _addressesProvider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * this function is invoked by the proxy contract when the LendingPool contract is added to the AddressesProvider.
     * @param _addressesProvider the address of the LendingPoolAddressesProvider registry*
     */
    "initialize(address)"(
      _addressesProvider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens) is minted.
     * @param _amount the amount to be deposited
     * @param _referralCode integrators are assigned a referral code and can potentially receive rewards.*
     * @param _reserve the address of the reserve
     */
    deposit(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens) is minted.
     * @param _amount the amount to be deposited
     * @param _referralCode integrators are assigned a referral code and can potentially receive rewards.*
     * @param _reserve the address of the reserve
     */
    "deposit(address,uint256,uint16)"(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * Redeems the underlying amount of assets requested by _user. This function is executed by the overlying aToken contract in response to a redeem action.
     * @param _amount the underlying amount to be redeemed*
     * @param _reserve the address of the reserve
     * @param _user the address of the user performing the action
     */
    redeemUnderlying(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _aTokenBalanceAfterRedeem: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Redeems the underlying amount of assets requested by _user. This function is executed by the overlying aToken contract in response to a redeem action.
     * @param _amount the underlying amount to be redeemed*
     * @param _reserve the address of the reserve
     * @param _user the address of the user performing the action
     */
    "redeemUnderlying(address,address,uint256,uint256)"(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _aTokenBalanceAfterRedeem: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows users to borrow a specific amount of the reserve currency, provided that the borrower already deposited enough collateral.
     * @param _amount the amount to be borrowed
     * @param _interestRateMode the interest rate mode at which the user wants to borrow. Can be 0 (STABLE) or 1 (VARIABLE)*
     * @param _reserve the address of the reserve
     */
    borrow(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Allows users to borrow a specific amount of the reserve currency, provided that the borrower already deposited enough collateral.
     * @param _amount the amount to be borrowed
     * @param _interestRateMode the interest rate mode at which the user wants to borrow. Can be 0 (STABLE) or 1 (VARIABLE)*
     * @param _reserve the address of the reserve
     */
    "borrow(address,uint256,uint256,uint16)"(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    repay(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "repay(address,uint256,address)"(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * borrowers can user this function to swap between stable and variable borrow rate modes.
     * @param _reserve the address of the reserve on which the user borrowed*
     */
    swapBorrowRateMode(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * borrowers can user this function to swap between stable and variable borrow rate modes.
     * @param _reserve the address of the reserve on which the user borrowed*
     */
    "swapBorrowRateMode(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * rebalances the stable interest rate of a user if current liquidity rate > user stable rate. this is regulated by Aave to ensure that the protocol is not abused, and the user is paying a fair rate. Anyone can call this function though.
     * @param _reserve the address of the reserve
     * @param _user the address of the user to be rebalanced*
     */
    rebalanceStableBorrowRate(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * rebalances the stable interest rate of a user if current liquidity rate > user stable rate. this is regulated by Aave to ensure that the protocol is not abused, and the user is paying a fair rate. Anyone can call this function though.
     * @param _reserve the address of the reserve
     * @param _user the address of the user to be rebalanced*
     */
    "rebalanceStableBorrowRate(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * allows depositors to enable or disable a specific deposit as collateral.
     * @param _reserve the address of the reserve
     * @param _useAsCollateral true if the user wants to user the deposit as collateral, false otherwise.*
     */
    setUserUseReserveAsCollateral(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * allows depositors to enable or disable a specific deposit as collateral.
     * @param _reserve the address of the reserve
     * @param _useAsCollateral true if the user wants to user the deposit as collateral, false otherwise.*
     */
    "setUserUseReserveAsCollateral(address,bool)"(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * users can invoke this function to liquidate an undercollateralized position.
     * @param _purchaseAmount the amount of principal that the liquidator wants to repay
     * @param _receiveAToken true if the liquidators wants to receive the aTokens, false if he wants to receive the underlying asset directly*
     * @param _reserve the address of the principal reserve
     * @param _user the address of the borrower
     */
    liquidationCall(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveAToken: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * users can invoke this function to liquidate an undercollateralized position.
     * @param _purchaseAmount the amount of principal that the liquidator wants to repay
     * @param _receiveAToken true if the liquidators wants to receive the aTokens, false if he wants to receive the underlying asset directly*
     * @param _reserve the address of the principal reserve
     * @param _user the address of the borrower
     */
    "liquidationCall(address,address,address,uint256,bool)"(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveAToken: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com
     * @param _amount the amount requested for this flashloan*
     * @param _receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.
     * @param _reserve the address of the principal reserve
     */
    flashLoan(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com
     * @param _amount the amount requested for this flashloan*
     * @param _receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.
     * @param _reserve the address of the principal reserve
     */
    "flashLoan(address,address,uint256,bytes)"(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * accessory functions to fetch data from the core contract*
     */
    getReserveConfigurationData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      ltv: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
      interestRateStrategyAddress: string;
      usageAsCollateralEnabled: boolean;
      borrowingEnabled: boolean;
      stableBorrowRateEnabled: boolean;
      isActive: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
      5: boolean;
      6: boolean;
      7: boolean;
    }>;

    /**
     * accessory functions to fetch data from the core contract*
     */
    "getReserveConfigurationData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      ltv: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
      interestRateStrategyAddress: string;
      usageAsCollateralEnabled: boolean;
      borrowingEnabled: boolean;
      stableBorrowRateEnabled: boolean;
      isActive: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
      5: boolean;
      6: boolean;
      7: boolean;
    }>;

    getReserveData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      totalLiquidity: BigNumber;
      availableLiquidity: BigNumber;
      totalBorrowsStable: BigNumber;
      totalBorrowsVariable: BigNumber;
      liquidityRate: BigNumber;
      variableBorrowRate: BigNumber;
      stableBorrowRate: BigNumber;
      averageStableBorrowRate: BigNumber;
      utilizationRate: BigNumber;
      liquidityIndex: BigNumber;
      variableBorrowIndex: BigNumber;
      aTokenAddress: string;
      lastUpdateTimestamp: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: BigNumber;
      11: string;
      12: number;
    }>;

    "getReserveData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      totalLiquidity: BigNumber;
      availableLiquidity: BigNumber;
      totalBorrowsStable: BigNumber;
      totalBorrowsVariable: BigNumber;
      liquidityRate: BigNumber;
      variableBorrowRate: BigNumber;
      stableBorrowRate: BigNumber;
      averageStableBorrowRate: BigNumber;
      utilizationRate: BigNumber;
      liquidityIndex: BigNumber;
      variableBorrowIndex: BigNumber;
      aTokenAddress: string;
      lastUpdateTimestamp: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: BigNumber;
      11: string;
      12: number;
    }>;

    getUserAccountData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      totalLiquidityETH: BigNumber;
      totalCollateralETH: BigNumber;
      totalBorrowsETH: BigNumber;
      totalFeesETH: BigNumber;
      availableBorrowsETH: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    "getUserAccountData(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      totalLiquidityETH: BigNumber;
      totalCollateralETH: BigNumber;
      totalBorrowsETH: BigNumber;
      totalFeesETH: BigNumber;
      availableBorrowsETH: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      currentATokenBalance: BigNumber;
      currentBorrowBalance: BigNumber;
      principalBorrowBalance: BigNumber;
      borrowRateMode: BigNumber;
      borrowRate: BigNumber;
      liquidityRate: BigNumber;
      originationFee: BigNumber;
      variableBorrowIndex: BigNumber;
      lastUpdateTimestamp: BigNumber;
      usageAsCollateralEnabled: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: boolean;
    }>;

    "getUserReserveData(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      currentATokenBalance: BigNumber;
      currentBorrowBalance: BigNumber;
      principalBorrowBalance: BigNumber;
      borrowRateMode: BigNumber;
      borrowRate: BigNumber;
      liquidityRate: BigNumber;
      originationFee: BigNumber;
      variableBorrowIndex: BigNumber;
      lastUpdateTimestamp: BigNumber;
      usageAsCollateralEnabled: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: boolean;
    }>;

    getReserves(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;

    "getReserves()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string[];
    }>;
  };

  LENDINGPOOL_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  "LENDINGPOOL_REVISION()"(overrides?: CallOverrides): Promise<BigNumber>;

  UINT_MAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  "UINT_MAX_VALUE()"(overrides?: CallOverrides): Promise<BigNumber>;

  addressesProvider(overrides?: CallOverrides): Promise<string>;

  "addressesProvider()"(overrides?: CallOverrides): Promise<string>;

  core(overrides?: CallOverrides): Promise<string>;

  "core()"(overrides?: CallOverrides): Promise<string>;

  dataProvider(overrides?: CallOverrides): Promise<string>;

  "dataProvider()"(overrides?: CallOverrides): Promise<string>;

  parametersProvider(overrides?: CallOverrides): Promise<string>;

  "parametersProvider()"(overrides?: CallOverrides): Promise<string>;

  /**
   * this function is invoked by the proxy contract when the LendingPool contract is added to the AddressesProvider.
   * @param _addressesProvider the address of the LendingPoolAddressesProvider registry*
   */
  initialize(
    _addressesProvider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * this function is invoked by the proxy contract when the LendingPool contract is added to the AddressesProvider.
   * @param _addressesProvider the address of the LendingPoolAddressesProvider registry*
   */
  "initialize(address)"(
    _addressesProvider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens) is minted.
   * @param _amount the amount to be deposited
   * @param _referralCode integrators are assigned a referral code and can potentially receive rewards.*
   * @param _reserve the address of the reserve
   */
  deposit(
    _reserve: string,
    _amount: BigNumberish,
    _referralCode: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens) is minted.
   * @param _amount the amount to be deposited
   * @param _referralCode integrators are assigned a referral code and can potentially receive rewards.*
   * @param _reserve the address of the reserve
   */
  "deposit(address,uint256,uint16)"(
    _reserve: string,
    _amount: BigNumberish,
    _referralCode: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * Redeems the underlying amount of assets requested by _user. This function is executed by the overlying aToken contract in response to a redeem action.
   * @param _amount the underlying amount to be redeemed*
   * @param _reserve the address of the reserve
   * @param _user the address of the user performing the action
   */
  redeemUnderlying(
    _reserve: string,
    _user: string,
    _amount: BigNumberish,
    _aTokenBalanceAfterRedeem: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Redeems the underlying amount of assets requested by _user. This function is executed by the overlying aToken contract in response to a redeem action.
   * @param _amount the underlying amount to be redeemed*
   * @param _reserve the address of the reserve
   * @param _user the address of the user performing the action
   */
  "redeemUnderlying(address,address,uint256,uint256)"(
    _reserve: string,
    _user: string,
    _amount: BigNumberish,
    _aTokenBalanceAfterRedeem: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows users to borrow a specific amount of the reserve currency, provided that the borrower already deposited enough collateral.
   * @param _amount the amount to be borrowed
   * @param _interestRateMode the interest rate mode at which the user wants to borrow. Can be 0 (STABLE) or 1 (VARIABLE)*
   * @param _reserve the address of the reserve
   */
  borrow(
    _reserve: string,
    _amount: BigNumberish,
    _interestRateMode: BigNumberish,
    _referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Allows users to borrow a specific amount of the reserve currency, provided that the borrower already deposited enough collateral.
   * @param _amount the amount to be borrowed
   * @param _interestRateMode the interest rate mode at which the user wants to borrow. Can be 0 (STABLE) or 1 (VARIABLE)*
   * @param _reserve the address of the reserve
   */
  "borrow(address,uint256,uint256,uint16)"(
    _reserve: string,
    _amount: BigNumberish,
    _interestRateMode: BigNumberish,
    _referralCode: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  repay(
    _reserve: string,
    _amount: BigNumberish,
    _onBehalfOf: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "repay(address,uint256,address)"(
    _reserve: string,
    _amount: BigNumberish,
    _onBehalfOf: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * borrowers can user this function to swap between stable and variable borrow rate modes.
   * @param _reserve the address of the reserve on which the user borrowed*
   */
  swapBorrowRateMode(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * borrowers can user this function to swap between stable and variable borrow rate modes.
   * @param _reserve the address of the reserve on which the user borrowed*
   */
  "swapBorrowRateMode(address)"(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * rebalances the stable interest rate of a user if current liquidity rate > user stable rate. this is regulated by Aave to ensure that the protocol is not abused, and the user is paying a fair rate. Anyone can call this function though.
   * @param _reserve the address of the reserve
   * @param _user the address of the user to be rebalanced*
   */
  rebalanceStableBorrowRate(
    _reserve: string,
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * rebalances the stable interest rate of a user if current liquidity rate > user stable rate. this is regulated by Aave to ensure that the protocol is not abused, and the user is paying a fair rate. Anyone can call this function though.
   * @param _reserve the address of the reserve
   * @param _user the address of the user to be rebalanced*
   */
  "rebalanceStableBorrowRate(address,address)"(
    _reserve: string,
    _user: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * allows depositors to enable or disable a specific deposit as collateral.
   * @param _reserve the address of the reserve
   * @param _useAsCollateral true if the user wants to user the deposit as collateral, false otherwise.*
   */
  setUserUseReserveAsCollateral(
    _reserve: string,
    _useAsCollateral: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * allows depositors to enable or disable a specific deposit as collateral.
   * @param _reserve the address of the reserve
   * @param _useAsCollateral true if the user wants to user the deposit as collateral, false otherwise.*
   */
  "setUserUseReserveAsCollateral(address,bool)"(
    _reserve: string,
    _useAsCollateral: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * users can invoke this function to liquidate an undercollateralized position.
   * @param _purchaseAmount the amount of principal that the liquidator wants to repay
   * @param _receiveAToken true if the liquidators wants to receive the aTokens, false if he wants to receive the underlying asset directly*
   * @param _reserve the address of the principal reserve
   * @param _user the address of the borrower
   */
  liquidationCall(
    _collateral: string,
    _reserve: string,
    _user: string,
    _purchaseAmount: BigNumberish,
    _receiveAToken: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * users can invoke this function to liquidate an undercollateralized position.
   * @param _purchaseAmount the amount of principal that the liquidator wants to repay
   * @param _receiveAToken true if the liquidators wants to receive the aTokens, false if he wants to receive the underlying asset directly*
   * @param _reserve the address of the principal reserve
   * @param _user the address of the borrower
   */
  "liquidationCall(address,address,address,uint256,bool)"(
    _collateral: string,
    _reserve: string,
    _user: string,
    _purchaseAmount: BigNumberish,
    _receiveAToken: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com
   * @param _amount the amount requested for this flashloan*
   * @param _receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.
   * @param _reserve the address of the principal reserve
   */
  flashLoan(
    _receiver: string,
    _reserve: string,
    _amount: BigNumberish,
    _params: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com
   * @param _amount the amount requested for this flashloan*
   * @param _receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.
   * @param _reserve the address of the principal reserve
   */
  "flashLoan(address,address,uint256,bytes)"(
    _receiver: string,
    _reserve: string,
    _amount: BigNumberish,
    _params: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * accessory functions to fetch data from the core contract*
   */
  getReserveConfigurationData(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<{
    ltv: BigNumber;
    liquidationThreshold: BigNumber;
    liquidationBonus: BigNumber;
    interestRateStrategyAddress: string;
    usageAsCollateralEnabled: boolean;
    borrowingEnabled: boolean;
    stableBorrowRateEnabled: boolean;
    isActive: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: boolean;
    5: boolean;
    6: boolean;
    7: boolean;
  }>;

  /**
   * accessory functions to fetch data from the core contract*
   */
  "getReserveConfigurationData(address)"(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<{
    ltv: BigNumber;
    liquidationThreshold: BigNumber;
    liquidationBonus: BigNumber;
    interestRateStrategyAddress: string;
    usageAsCollateralEnabled: boolean;
    borrowingEnabled: boolean;
    stableBorrowRateEnabled: boolean;
    isActive: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
    4: boolean;
    5: boolean;
    6: boolean;
    7: boolean;
  }>;

  getReserveData(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<{
    totalLiquidity: BigNumber;
    availableLiquidity: BigNumber;
    totalBorrowsStable: BigNumber;
    totalBorrowsVariable: BigNumber;
    liquidityRate: BigNumber;
    variableBorrowRate: BigNumber;
    stableBorrowRate: BigNumber;
    averageStableBorrowRate: BigNumber;
    utilizationRate: BigNumber;
    liquidityIndex: BigNumber;
    variableBorrowIndex: BigNumber;
    aTokenAddress: string;
    lastUpdateTimestamp: number;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: BigNumber;
    10: BigNumber;
    11: string;
    12: number;
  }>;

  "getReserveData(address)"(
    _reserve: string,
    overrides?: CallOverrides
  ): Promise<{
    totalLiquidity: BigNumber;
    availableLiquidity: BigNumber;
    totalBorrowsStable: BigNumber;
    totalBorrowsVariable: BigNumber;
    liquidityRate: BigNumber;
    variableBorrowRate: BigNumber;
    stableBorrowRate: BigNumber;
    averageStableBorrowRate: BigNumber;
    utilizationRate: BigNumber;
    liquidityIndex: BigNumber;
    variableBorrowIndex: BigNumber;
    aTokenAddress: string;
    lastUpdateTimestamp: number;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: BigNumber;
    10: BigNumber;
    11: string;
    12: number;
  }>;

  getUserAccountData(
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    totalLiquidityETH: BigNumber;
    totalCollateralETH: BigNumber;
    totalBorrowsETH: BigNumber;
    totalFeesETH: BigNumber;
    availableBorrowsETH: BigNumber;
    currentLiquidationThreshold: BigNumber;
    ltv: BigNumber;
    healthFactor: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  "getUserAccountData(address)"(
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    totalLiquidityETH: BigNumber;
    totalCollateralETH: BigNumber;
    totalBorrowsETH: BigNumber;
    totalFeesETH: BigNumber;
    availableBorrowsETH: BigNumber;
    currentLiquidationThreshold: BigNumber;
    ltv: BigNumber;
    healthFactor: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
  }>;

  getUserReserveData(
    _reserve: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    currentATokenBalance: BigNumber;
    currentBorrowBalance: BigNumber;
    principalBorrowBalance: BigNumber;
    borrowRateMode: BigNumber;
    borrowRate: BigNumber;
    liquidityRate: BigNumber;
    originationFee: BigNumber;
    variableBorrowIndex: BigNumber;
    lastUpdateTimestamp: BigNumber;
    usageAsCollateralEnabled: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: boolean;
  }>;

  "getUserReserveData(address,address)"(
    _reserve: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<{
    currentATokenBalance: BigNumber;
    currentBorrowBalance: BigNumber;
    principalBorrowBalance: BigNumber;
    borrowRateMode: BigNumber;
    borrowRate: BigNumber;
    liquidityRate: BigNumber;
    originationFee: BigNumber;
    variableBorrowIndex: BigNumber;
    lastUpdateTimestamp: BigNumber;
    usageAsCollateralEnabled: boolean;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: boolean;
  }>;

  getReserves(overrides?: CallOverrides): Promise<string[]>;

  "getReserves()"(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    LENDINGPOOL_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    "LENDINGPOOL_REVISION()"(overrides?: CallOverrides): Promise<BigNumber>;

    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    "UINT_MAX_VALUE()"(overrides?: CallOverrides): Promise<BigNumber>;

    addressesProvider(overrides?: CallOverrides): Promise<string>;

    "addressesProvider()"(overrides?: CallOverrides): Promise<string>;

    core(overrides?: CallOverrides): Promise<string>;

    "core()"(overrides?: CallOverrides): Promise<string>;

    dataProvider(overrides?: CallOverrides): Promise<string>;

    "dataProvider()"(overrides?: CallOverrides): Promise<string>;

    parametersProvider(overrides?: CallOverrides): Promise<string>;

    "parametersProvider()"(overrides?: CallOverrides): Promise<string>;

    /**
     * this function is invoked by the proxy contract when the LendingPool contract is added to the AddressesProvider.
     * @param _addressesProvider the address of the LendingPoolAddressesProvider registry*
     */
    initialize(
      _addressesProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * this function is invoked by the proxy contract when the LendingPool contract is added to the AddressesProvider.
     * @param _addressesProvider the address of the LendingPoolAddressesProvider registry*
     */
    "initialize(address)"(
      _addressesProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens) is minted.
     * @param _amount the amount to be deposited
     * @param _referralCode integrators are assigned a referral code and can potentially receive rewards.*
     * @param _reserve the address of the reserve
     */
    deposit(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens) is minted.
     * @param _amount the amount to be deposited
     * @param _referralCode integrators are assigned a referral code and can potentially receive rewards.*
     * @param _reserve the address of the reserve
     */
    "deposit(address,uint256,uint16)"(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Redeems the underlying amount of assets requested by _user. This function is executed by the overlying aToken contract in response to a redeem action.
     * @param _amount the underlying amount to be redeemed*
     * @param _reserve the address of the reserve
     * @param _user the address of the user performing the action
     */
    redeemUnderlying(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _aTokenBalanceAfterRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Redeems the underlying amount of assets requested by _user. This function is executed by the overlying aToken contract in response to a redeem action.
     * @param _amount the underlying amount to be redeemed*
     * @param _reserve the address of the reserve
     * @param _user the address of the user performing the action
     */
    "redeemUnderlying(address,address,uint256,uint256)"(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _aTokenBalanceAfterRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows users to borrow a specific amount of the reserve currency, provided that the borrower already deposited enough collateral.
     * @param _amount the amount to be borrowed
     * @param _interestRateMode the interest rate mode at which the user wants to borrow. Can be 0 (STABLE) or 1 (VARIABLE)*
     * @param _reserve the address of the reserve
     */
    borrow(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows users to borrow a specific amount of the reserve currency, provided that the borrower already deposited enough collateral.
     * @param _amount the amount to be borrowed
     * @param _interestRateMode the interest rate mode at which the user wants to borrow. Can be 0 (STABLE) or 1 (VARIABLE)*
     * @param _reserve the address of the reserve
     */
    "borrow(address,uint256,uint256,uint16)"(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "repay(address,uint256,address)"(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * borrowers can user this function to swap between stable and variable borrow rate modes.
     * @param _reserve the address of the reserve on which the user borrowed*
     */
    swapBorrowRateMode(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * borrowers can user this function to swap between stable and variable borrow rate modes.
     * @param _reserve the address of the reserve on which the user borrowed*
     */
    "swapBorrowRateMode(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * rebalances the stable interest rate of a user if current liquidity rate > user stable rate. this is regulated by Aave to ensure that the protocol is not abused, and the user is paying a fair rate. Anyone can call this function though.
     * @param _reserve the address of the reserve
     * @param _user the address of the user to be rebalanced*
     */
    rebalanceStableBorrowRate(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * rebalances the stable interest rate of a user if current liquidity rate > user stable rate. this is regulated by Aave to ensure that the protocol is not abused, and the user is paying a fair rate. Anyone can call this function though.
     * @param _reserve the address of the reserve
     * @param _user the address of the user to be rebalanced*
     */
    "rebalanceStableBorrowRate(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * allows depositors to enable or disable a specific deposit as collateral.
     * @param _reserve the address of the reserve
     * @param _useAsCollateral true if the user wants to user the deposit as collateral, false otherwise.*
     */
    setUserUseReserveAsCollateral(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * allows depositors to enable or disable a specific deposit as collateral.
     * @param _reserve the address of the reserve
     * @param _useAsCollateral true if the user wants to user the deposit as collateral, false otherwise.*
     */
    "setUserUseReserveAsCollateral(address,bool)"(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * users can invoke this function to liquidate an undercollateralized position.
     * @param _purchaseAmount the amount of principal that the liquidator wants to repay
     * @param _receiveAToken true if the liquidators wants to receive the aTokens, false if he wants to receive the underlying asset directly*
     * @param _reserve the address of the principal reserve
     * @param _user the address of the borrower
     */
    liquidationCall(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveAToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * users can invoke this function to liquidate an undercollateralized position.
     * @param _purchaseAmount the amount of principal that the liquidator wants to repay
     * @param _receiveAToken true if the liquidators wants to receive the aTokens, false if he wants to receive the underlying asset directly*
     * @param _reserve the address of the principal reserve
     * @param _user the address of the borrower
     */
    "liquidationCall(address,address,address,uint256,bool)"(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveAToken: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com
     * @param _amount the amount requested for this flashloan*
     * @param _receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.
     * @param _reserve the address of the principal reserve
     */
    flashLoan(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com
     * @param _amount the amount requested for this flashloan*
     * @param _receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.
     * @param _reserve the address of the principal reserve
     */
    "flashLoan(address,address,uint256,bytes)"(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * accessory functions to fetch data from the core contract*
     */
    getReserveConfigurationData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      ltv: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
      interestRateStrategyAddress: string;
      usageAsCollateralEnabled: boolean;
      borrowingEnabled: boolean;
      stableBorrowRateEnabled: boolean;
      isActive: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
      5: boolean;
      6: boolean;
      7: boolean;
    }>;

    /**
     * accessory functions to fetch data from the core contract*
     */
    "getReserveConfigurationData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      ltv: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
      interestRateStrategyAddress: string;
      usageAsCollateralEnabled: boolean;
      borrowingEnabled: boolean;
      stableBorrowRateEnabled: boolean;
      isActive: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
      4: boolean;
      5: boolean;
      6: boolean;
      7: boolean;
    }>;

    getReserveData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      totalLiquidity: BigNumber;
      availableLiquidity: BigNumber;
      totalBorrowsStable: BigNumber;
      totalBorrowsVariable: BigNumber;
      liquidityRate: BigNumber;
      variableBorrowRate: BigNumber;
      stableBorrowRate: BigNumber;
      averageStableBorrowRate: BigNumber;
      utilizationRate: BigNumber;
      liquidityIndex: BigNumber;
      variableBorrowIndex: BigNumber;
      aTokenAddress: string;
      lastUpdateTimestamp: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: BigNumber;
      11: string;
      12: number;
    }>;

    "getReserveData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<{
      totalLiquidity: BigNumber;
      availableLiquidity: BigNumber;
      totalBorrowsStable: BigNumber;
      totalBorrowsVariable: BigNumber;
      liquidityRate: BigNumber;
      variableBorrowRate: BigNumber;
      stableBorrowRate: BigNumber;
      averageStableBorrowRate: BigNumber;
      utilizationRate: BigNumber;
      liquidityIndex: BigNumber;
      variableBorrowIndex: BigNumber;
      aTokenAddress: string;
      lastUpdateTimestamp: number;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: BigNumber;
      11: string;
      12: number;
    }>;

    getUserAccountData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      totalLiquidityETH: BigNumber;
      totalCollateralETH: BigNumber;
      totalBorrowsETH: BigNumber;
      totalFeesETH: BigNumber;
      availableBorrowsETH: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    "getUserAccountData(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      totalLiquidityETH: BigNumber;
      totalCollateralETH: BigNumber;
      totalBorrowsETH: BigNumber;
      totalFeesETH: BigNumber;
      availableBorrowsETH: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
    }>;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      currentATokenBalance: BigNumber;
      currentBorrowBalance: BigNumber;
      principalBorrowBalance: BigNumber;
      borrowRateMode: BigNumber;
      borrowRate: BigNumber;
      liquidityRate: BigNumber;
      originationFee: BigNumber;
      variableBorrowIndex: BigNumber;
      lastUpdateTimestamp: BigNumber;
      usageAsCollateralEnabled: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: boolean;
    }>;

    "getUserReserveData(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<{
      currentATokenBalance: BigNumber;
      currentBorrowBalance: BigNumber;
      principalBorrowBalance: BigNumber;
      borrowRateMode: BigNumber;
      borrowRate: BigNumber;
      liquidityRate: BigNumber;
      originationFee: BigNumber;
      variableBorrowIndex: BigNumber;
      lastUpdateTimestamp: BigNumber;
      usageAsCollateralEnabled: boolean;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: boolean;
    }>;

    getReserves(overrides?: CallOverrides): Promise<string[]>;

    "getReserves()"(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    Borrow(
      _reserve: string | null,
      _user: string | null,
      _amount: null,
      _borrowRateMode: null,
      _borrowRate: null,
      _originationFee: null,
      _borrowBalanceIncrease: null,
      _referral: BigNumberish | null,
      _timestamp: null
    ): EventFilter;

    Deposit(
      _reserve: string | null,
      _user: string | null,
      _amount: null,
      _referral: BigNumberish | null,
      _timestamp: null
    ): EventFilter;

    FlashLoan(
      _target: string | null,
      _reserve: string | null,
      _amount: null,
      _totalFee: null,
      _protocolFee: null,
      _timestamp: null
    ): EventFilter;

    LiquidationCall(
      _collateral: string | null,
      _reserve: string | null,
      _user: string | null,
      _purchaseAmount: null,
      _liquidatedCollateralAmount: null,
      _accruedBorrowInterest: null,
      _liquidator: null,
      _receiveAToken: null,
      _timestamp: null
    ): EventFilter;

    OriginationFeeLiquidated(
      _collateral: string | null,
      _reserve: string | null,
      _user: string | null,
      _feeLiquidated: null,
      _liquidatedCollateralForFee: null,
      _timestamp: null
    ): EventFilter;

    RebalanceStableBorrowRate(
      _reserve: string | null,
      _user: string | null,
      _newStableRate: null,
      _borrowBalanceIncrease: null,
      _timestamp: null
    ): EventFilter;

    RedeemUnderlying(
      _reserve: string | null,
      _user: string | null,
      _amount: null,
      _timestamp: null
    ): EventFilter;

    Repay(
      _reserve: string | null,
      _user: string | null,
      _repayer: string | null,
      _amountMinusFees: null,
      _fees: null,
      _borrowBalanceIncrease: null,
      _timestamp: null
    ): EventFilter;

    ReserveUsedAsCollateralDisabled(
      _reserve: string | null,
      _user: string | null
    ): EventFilter;

    ReserveUsedAsCollateralEnabled(
      _reserve: string | null,
      _user: string | null
    ): EventFilter;

    Swap(
      _reserve: string | null,
      _user: string | null,
      _newRateMode: null,
      _newRate: null,
      _borrowBalanceIncrease: null,
      _timestamp: null
    ): EventFilter;
  };

  estimateGas: {
    LENDINGPOOL_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    "LENDINGPOOL_REVISION()"(overrides?: CallOverrides): Promise<BigNumber>;

    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    "UINT_MAX_VALUE()"(overrides?: CallOverrides): Promise<BigNumber>;

    addressesProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "addressesProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    core(overrides?: CallOverrides): Promise<BigNumber>;

    "core()"(overrides?: CallOverrides): Promise<BigNumber>;

    dataProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "dataProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    parametersProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "parametersProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this function is invoked by the proxy contract when the LendingPool contract is added to the AddressesProvider.
     * @param _addressesProvider the address of the LendingPoolAddressesProvider registry*
     */
    initialize(
      _addressesProvider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * this function is invoked by the proxy contract when the LendingPool contract is added to the AddressesProvider.
     * @param _addressesProvider the address of the LendingPoolAddressesProvider registry*
     */
    "initialize(address)"(
      _addressesProvider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens) is minted.
     * @param _amount the amount to be deposited
     * @param _referralCode integrators are assigned a referral code and can potentially receive rewards.*
     * @param _reserve the address of the reserve
     */
    deposit(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens) is minted.
     * @param _amount the amount to be deposited
     * @param _referralCode integrators are assigned a referral code and can potentially receive rewards.*
     * @param _reserve the address of the reserve
     */
    "deposit(address,uint256,uint16)"(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * Redeems the underlying amount of assets requested by _user. This function is executed by the overlying aToken contract in response to a redeem action.
     * @param _amount the underlying amount to be redeemed*
     * @param _reserve the address of the reserve
     * @param _user the address of the user performing the action
     */
    redeemUnderlying(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _aTokenBalanceAfterRedeem: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Redeems the underlying amount of assets requested by _user. This function is executed by the overlying aToken contract in response to a redeem action.
     * @param _amount the underlying amount to be redeemed*
     * @param _reserve the address of the reserve
     * @param _user the address of the user performing the action
     */
    "redeemUnderlying(address,address,uint256,uint256)"(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _aTokenBalanceAfterRedeem: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows users to borrow a specific amount of the reserve currency, provided that the borrower already deposited enough collateral.
     * @param _amount the amount to be borrowed
     * @param _interestRateMode the interest rate mode at which the user wants to borrow. Can be 0 (STABLE) or 1 (VARIABLE)*
     * @param _reserve the address of the reserve
     */
    borrow(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Allows users to borrow a specific amount of the reserve currency, provided that the borrower already deposited enough collateral.
     * @param _amount the amount to be borrowed
     * @param _interestRateMode the interest rate mode at which the user wants to borrow. Can be 0 (STABLE) or 1 (VARIABLE)*
     * @param _reserve the address of the reserve
     */
    "borrow(address,uint256,uint256,uint16)"(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    repay(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "repay(address,uint256,address)"(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * borrowers can user this function to swap between stable and variable borrow rate modes.
     * @param _reserve the address of the reserve on which the user borrowed*
     */
    swapBorrowRateMode(
      _reserve: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * borrowers can user this function to swap between stable and variable borrow rate modes.
     * @param _reserve the address of the reserve on which the user borrowed*
     */
    "swapBorrowRateMode(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * rebalances the stable interest rate of a user if current liquidity rate > user stable rate. this is regulated by Aave to ensure that the protocol is not abused, and the user is paying a fair rate. Anyone can call this function though.
     * @param _reserve the address of the reserve
     * @param _user the address of the user to be rebalanced*
     */
    rebalanceStableBorrowRate(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * rebalances the stable interest rate of a user if current liquidity rate > user stable rate. this is regulated by Aave to ensure that the protocol is not abused, and the user is paying a fair rate. Anyone can call this function though.
     * @param _reserve the address of the reserve
     * @param _user the address of the user to be rebalanced*
     */
    "rebalanceStableBorrowRate(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * allows depositors to enable or disable a specific deposit as collateral.
     * @param _reserve the address of the reserve
     * @param _useAsCollateral true if the user wants to user the deposit as collateral, false otherwise.*
     */
    setUserUseReserveAsCollateral(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * allows depositors to enable or disable a specific deposit as collateral.
     * @param _reserve the address of the reserve
     * @param _useAsCollateral true if the user wants to user the deposit as collateral, false otherwise.*
     */
    "setUserUseReserveAsCollateral(address,bool)"(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * users can invoke this function to liquidate an undercollateralized position.
     * @param _purchaseAmount the amount of principal that the liquidator wants to repay
     * @param _receiveAToken true if the liquidators wants to receive the aTokens, false if he wants to receive the underlying asset directly*
     * @param _reserve the address of the principal reserve
     * @param _user the address of the borrower
     */
    liquidationCall(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveAToken: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * users can invoke this function to liquidate an undercollateralized position.
     * @param _purchaseAmount the amount of principal that the liquidator wants to repay
     * @param _receiveAToken true if the liquidators wants to receive the aTokens, false if he wants to receive the underlying asset directly*
     * @param _reserve the address of the principal reserve
     * @param _user the address of the borrower
     */
    "liquidationCall(address,address,address,uint256,bool)"(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveAToken: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com
     * @param _amount the amount requested for this flashloan*
     * @param _receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.
     * @param _reserve the address of the principal reserve
     */
    flashLoan(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com
     * @param _amount the amount requested for this flashloan*
     * @param _receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.
     * @param _reserve the address of the principal reserve
     */
    "flashLoan(address,address,uint256,bytes)"(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * accessory functions to fetch data from the core contract*
     */
    getReserveConfigurationData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * accessory functions to fetch data from the core contract*
     */
    "getReserveConfigurationData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReserveData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAccountData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserAccountData(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserReserveData(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getReserves()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    LENDINGPOOL_REVISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "LENDINGPOOL_REVISION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "UINT_MAX_VALUE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressesProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "addressesProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "core()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dataProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dataProvider()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parametersProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "parametersProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is invoked by the proxy contract when the LendingPool contract is added to the AddressesProvider.
     * @param _addressesProvider the address of the LendingPoolAddressesProvider registry*
     */
    initialize(
      _addressesProvider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is invoked by the proxy contract when the LendingPool contract is added to the AddressesProvider.
     * @param _addressesProvider the address of the LendingPoolAddressesProvider registry*
     */
    "initialize(address)"(
      _addressesProvider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens) is minted.
     * @param _amount the amount to be deposited
     * @param _referralCode integrators are assigned a referral code and can potentially receive rewards.*
     * @param _reserve the address of the reserve
     */
    deposit(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens) is minted.
     * @param _amount the amount to be deposited
     * @param _referralCode integrators are assigned a referral code and can potentially receive rewards.*
     * @param _reserve the address of the reserve
     */
    "deposit(address,uint256,uint16)"(
      _reserve: string,
      _amount: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Redeems the underlying amount of assets requested by _user. This function is executed by the overlying aToken contract in response to a redeem action.
     * @param _amount the underlying amount to be redeemed*
     * @param _reserve the address of the reserve
     * @param _user the address of the user performing the action
     */
    redeemUnderlying(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _aTokenBalanceAfterRedeem: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Redeems the underlying amount of assets requested by _user. This function is executed by the overlying aToken contract in response to a redeem action.
     * @param _amount the underlying amount to be redeemed*
     * @param _reserve the address of the reserve
     * @param _user the address of the user performing the action
     */
    "redeemUnderlying(address,address,uint256,uint256)"(
      _reserve: string,
      _user: string,
      _amount: BigNumberish,
      _aTokenBalanceAfterRedeem: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows users to borrow a specific amount of the reserve currency, provided that the borrower already deposited enough collateral.
     * @param _amount the amount to be borrowed
     * @param _interestRateMode the interest rate mode at which the user wants to borrow. Can be 0 (STABLE) or 1 (VARIABLE)*
     * @param _reserve the address of the reserve
     */
    borrow(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Allows users to borrow a specific amount of the reserve currency, provided that the borrower already deposited enough collateral.
     * @param _amount the amount to be borrowed
     * @param _interestRateMode the interest rate mode at which the user wants to borrow. Can be 0 (STABLE) or 1 (VARIABLE)*
     * @param _reserve the address of the reserve
     */
    "borrow(address,uint256,uint256,uint16)"(
      _reserve: string,
      _amount: BigNumberish,
      _interestRateMode: BigNumberish,
      _referralCode: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    repay(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "repay(address,uint256,address)"(
      _reserve: string,
      _amount: BigNumberish,
      _onBehalfOf: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * borrowers can user this function to swap between stable and variable borrow rate modes.
     * @param _reserve the address of the reserve on which the user borrowed*
     */
    swapBorrowRateMode(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * borrowers can user this function to swap between stable and variable borrow rate modes.
     * @param _reserve the address of the reserve on which the user borrowed*
     */
    "swapBorrowRateMode(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * rebalances the stable interest rate of a user if current liquidity rate > user stable rate. this is regulated by Aave to ensure that the protocol is not abused, and the user is paying a fair rate. Anyone can call this function though.
     * @param _reserve the address of the reserve
     * @param _user the address of the user to be rebalanced*
     */
    rebalanceStableBorrowRate(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * rebalances the stable interest rate of a user if current liquidity rate > user stable rate. this is regulated by Aave to ensure that the protocol is not abused, and the user is paying a fair rate. Anyone can call this function though.
     * @param _reserve the address of the reserve
     * @param _user the address of the user to be rebalanced*
     */
    "rebalanceStableBorrowRate(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * allows depositors to enable or disable a specific deposit as collateral.
     * @param _reserve the address of the reserve
     * @param _useAsCollateral true if the user wants to user the deposit as collateral, false otherwise.*
     */
    setUserUseReserveAsCollateral(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * allows depositors to enable or disable a specific deposit as collateral.
     * @param _reserve the address of the reserve
     * @param _useAsCollateral true if the user wants to user the deposit as collateral, false otherwise.*
     */
    "setUserUseReserveAsCollateral(address,bool)"(
      _reserve: string,
      _useAsCollateral: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * users can invoke this function to liquidate an undercollateralized position.
     * @param _purchaseAmount the amount of principal that the liquidator wants to repay
     * @param _receiveAToken true if the liquidators wants to receive the aTokens, false if he wants to receive the underlying asset directly*
     * @param _reserve the address of the principal reserve
     * @param _user the address of the borrower
     */
    liquidationCall(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveAToken: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * users can invoke this function to liquidate an undercollateralized position.
     * @param _purchaseAmount the amount of principal that the liquidator wants to repay
     * @param _receiveAToken true if the liquidators wants to receive the aTokens, false if he wants to receive the underlying asset directly*
     * @param _reserve the address of the principal reserve
     * @param _user the address of the borrower
     */
    "liquidationCall(address,address,address,uint256,bool)"(
      _collateral: string,
      _reserve: string,
      _user: string,
      _purchaseAmount: BigNumberish,
      _receiveAToken: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com
     * @param _amount the amount requested for this flashloan*
     * @param _receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.
     * @param _reserve the address of the principal reserve
     */
    flashLoan(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com
     * @param _amount the amount requested for this flashloan*
     * @param _receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.
     * @param _reserve the address of the principal reserve
     */
    "flashLoan(address,address,uint256,bytes)"(
      _receiver: string,
      _reserve: string,
      _amount: BigNumberish,
      _params: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * accessory functions to fetch data from the core contract*
     */
    getReserveConfigurationData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * accessory functions to fetch data from the core contract*
     */
    "getReserveConfigurationData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveData(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReserveData(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserAccountData(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserAccountData(address)"(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReserveData(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserReserveData(address,address)"(
      _reserve: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReserves()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
