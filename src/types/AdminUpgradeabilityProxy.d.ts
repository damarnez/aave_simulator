/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface AdminUpgradeabilityProxyInterface extends ethers.utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "changeAdmin(address)": FunctionFragment;
    "implementation()": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "changeAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export class AdminUpgradeabilityProxy extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: AdminUpgradeabilityProxyInterface;

  functions: {
    /**
     * @returns The address of the proxy admin.
     */
    admin(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * @returns The address of the proxy admin.
     */
    "admin()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Changes the admin of the proxy. Only the current admin can call this function.
     * @param newAdmin Address to transfer proxy administration to.
     */
    changeAdmin(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Changes the admin of the proxy. Only the current admin can call this function.
     * @param newAdmin Address to transfer proxy administration to.
     */
    "changeAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * @returns The address of the implementation.
     */
    implementation(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * @returns The address of the implementation.
     */
    "implementation()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Upgrade the backing implementation of the proxy. Only the admin can call this function.
     * @param newImplementation Address of the new implementation.
     */
    upgradeTo(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Upgrade the backing implementation of the proxy. Only the admin can call this function.
     * @param newImplementation Address of the new implementation.
     */
    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Upgrade the backing implementation of the proxy and call a function on the new implementation. This is useful to initialize the proxied contract.
     * @param data Data to send as msg.data in the low level call. It should include the signature and the parameters of the function to be called, as described in https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
     * @param newImplementation Address of the new implementation.
     */
    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    /**
     * Upgrade the backing implementation of the proxy and call a function on the new implementation. This is useful to initialize the proxied contract.
     * @param data Data to send as msg.data in the low level call. It should include the signature and the parameters of the function to be called, as described in https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
     * @param newImplementation Address of the new implementation.
     */
    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  /**
   * @returns The address of the proxy admin.
   */
  admin(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * @returns The address of the proxy admin.
   */
  "admin()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Changes the admin of the proxy. Only the current admin can call this function.
   * @param newAdmin Address to transfer proxy administration to.
   */
  changeAdmin(
    newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Changes the admin of the proxy. Only the current admin can call this function.
   * @param newAdmin Address to transfer proxy administration to.
   */
  "changeAdmin(address)"(
    newAdmin: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * @returns The address of the implementation.
   */
  implementation(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * @returns The address of the implementation.
   */
  "implementation()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Upgrade the backing implementation of the proxy. Only the admin can call this function.
   * @param newImplementation Address of the new implementation.
   */
  upgradeTo(
    newImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Upgrade the backing implementation of the proxy. Only the admin can call this function.
   * @param newImplementation Address of the new implementation.
   */
  "upgradeTo(address)"(
    newImplementation: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Upgrade the backing implementation of the proxy and call a function on the new implementation. This is useful to initialize the proxied contract.
   * @param data Data to send as msg.data in the low level call. It should include the signature and the parameters of the function to be called, as described in https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
   * @param newImplementation Address of the new implementation.
   */
  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  /**
   * Upgrade the backing implementation of the proxy and call a function on the new implementation. This is useful to initialize the proxied contract.
   * @param data Data to send as msg.data in the low level call. It should include the signature and the parameters of the function to be called, as described in https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
   * @param newImplementation Address of the new implementation.
   */
  "upgradeToAndCall(address,bytes)"(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    /**
     * @returns The address of the proxy admin.
     */
    admin(overrides?: CallOverrides): Promise<string>;

    /**
     * @returns The address of the proxy admin.
     */
    "admin()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Changes the admin of the proxy. Only the current admin can call this function.
     * @param newAdmin Address to transfer proxy administration to.
     */
    changeAdmin(newAdmin: string, overrides?: CallOverrides): Promise<void>;

    /**
     * Changes the admin of the proxy. Only the current admin can call this function.
     * @param newAdmin Address to transfer proxy administration to.
     */
    "changeAdmin(address)"(
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * @returns The address of the implementation.
     */
    implementation(overrides?: CallOverrides): Promise<string>;

    /**
     * @returns The address of the implementation.
     */
    "implementation()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Upgrade the backing implementation of the proxy. Only the admin can call this function.
     * @param newImplementation Address of the new implementation.
     */
    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Upgrade the backing implementation of the proxy. Only the admin can call this function.
     * @param newImplementation Address of the new implementation.
     */
    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Upgrade the backing implementation of the proxy and call a function on the new implementation. This is useful to initialize the proxied contract.
     * @param data Data to send as msg.data in the low level call. It should include the signature and the parameters of the function to be called, as described in https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
     * @param newImplementation Address of the new implementation.
     */
    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Upgrade the backing implementation of the proxy and call a function on the new implementation. This is useful to initialize the proxied contract.
     * @param data Data to send as msg.data in the low level call. It should include the signature and the parameters of the function to be called, as described in https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
     * @param newImplementation Address of the new implementation.
     */
    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AdminChanged(previousAdmin: null, newAdmin: null): EventFilter;

    Upgraded(implementation: string | null): EventFilter;
  };

  estimateGas: {
    /**
     * @returns The address of the proxy admin.
     */
    admin(overrides?: Overrides): Promise<BigNumber>;

    /**
     * @returns The address of the proxy admin.
     */
    "admin()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Changes the admin of the proxy. Only the current admin can call this function.
     * @param newAdmin Address to transfer proxy administration to.
     */
    changeAdmin(newAdmin: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * Changes the admin of the proxy. Only the current admin can call this function.
     * @param newAdmin Address to transfer proxy administration to.
     */
    "changeAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * @returns The address of the implementation.
     */
    implementation(overrides?: Overrides): Promise<BigNumber>;

    /**
     * @returns The address of the implementation.
     */
    "implementation()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Upgrade the backing implementation of the proxy. Only the admin can call this function.
     * @param newImplementation Address of the new implementation.
     */
    upgradeTo(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Upgrade the backing implementation of the proxy. Only the admin can call this function.
     * @param newImplementation Address of the new implementation.
     */
    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Upgrade the backing implementation of the proxy and call a function on the new implementation. This is useful to initialize the proxied contract.
     * @param data Data to send as msg.data in the low level call. It should include the signature and the parameters of the function to be called, as described in https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
     * @param newImplementation Address of the new implementation.
     */
    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    /**
     * Upgrade the backing implementation of the proxy and call a function on the new implementation. This is useful to initialize the proxied contract.
     * @param data Data to send as msg.data in the low level call. It should include the signature and the parameters of the function to be called, as described in https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
     * @param newImplementation Address of the new implementation.
     */
    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * @returns The address of the proxy admin.
     */
    admin(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * @returns The address of the proxy admin.
     */
    "admin()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Changes the admin of the proxy. Only the current admin can call this function.
     * @param newAdmin Address to transfer proxy administration to.
     */
    changeAdmin(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Changes the admin of the proxy. Only the current admin can call this function.
     * @param newAdmin Address to transfer proxy administration to.
     */
    "changeAdmin(address)"(
      newAdmin: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * @returns The address of the implementation.
     */
    implementation(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * @returns The address of the implementation.
     */
    "implementation()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Upgrade the backing implementation of the proxy. Only the admin can call this function.
     * @param newImplementation Address of the new implementation.
     */
    upgradeTo(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Upgrade the backing implementation of the proxy. Only the admin can call this function.
     * @param newImplementation Address of the new implementation.
     */
    "upgradeTo(address)"(
      newImplementation: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Upgrade the backing implementation of the proxy and call a function on the new implementation. This is useful to initialize the proxied contract.
     * @param data Data to send as msg.data in the low level call. It should include the signature and the parameters of the function to be called, as described in https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
     * @param newImplementation Address of the new implementation.
     */
    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Upgrade the backing implementation of the proxy and call a function on the new implementation. This is useful to initialize the proxied contract.
     * @param data Data to send as msg.data in the low level call. It should include the signature and the parameters of the function to be called, as described in https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.
     * @param newImplementation Address of the new implementation.
     */
    "upgradeToAndCall(address,bytes)"(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
