/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LendingPoolAddressesProviderInterface extends ethers.utils.Interface {
  functions: {
    "getAddress(bytes32)": FunctionFragment;
    "isOwner()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "getLendingPool()": FunctionFragment;
    "setLendingPoolImpl(address)": FunctionFragment;
    "getLendingPoolCore()": FunctionFragment;
    "setLendingPoolCoreImpl(address)": FunctionFragment;
    "getLendingPoolConfigurator()": FunctionFragment;
    "setLendingPoolConfiguratorImpl(address)": FunctionFragment;
    "getLendingPoolDataProvider()": FunctionFragment;
    "setLendingPoolDataProviderImpl(address)": FunctionFragment;
    "getLendingPoolParametersProvider()": FunctionFragment;
    "setLendingPoolParametersProviderImpl(address)": FunctionFragment;
    "getFeeProvider()": FunctionFragment;
    "setFeeProviderImpl(address)": FunctionFragment;
    "getLendingPoolLiquidationManager()": FunctionFragment;
    "setLendingPoolLiquidationManager(address)": FunctionFragment;
    "getLendingPoolManager()": FunctionFragment;
    "setLendingPoolManager(address)": FunctionFragment;
    "getPriceOracle()": FunctionFragment;
    "setPriceOracle(address)": FunctionFragment;
    "getLendingRateOracle()": FunctionFragment;
    "setLendingRateOracle(address)": FunctionFragment;
    "getTokenDistributor()": FunctionFragment;
    "setTokenDistributor(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolCore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolCoreImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolConfigurator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolConfiguratorImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolDataProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolDataProviderImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolParametersProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolParametersProviderImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeProviderImpl",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolLiquidationManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolLiquidationManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingPoolManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingPoolManager",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLendingRateOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLendingRateOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenDistributor",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolCoreImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolConfigurator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolConfiguratorImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolDataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolDataProviderImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolParametersProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolParametersProviderImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeProviderImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolLiquidationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolLiquidationManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingPoolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingPoolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLendingRateOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLendingRateOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenDistributor",
    data: BytesLike
  ): Result;

  events: {
    "EthereumAddressUpdated(address)": EventFragment;
    "FeeProviderUpdated(address)": EventFragment;
    "LendingPoolConfiguratorUpdated(address)": EventFragment;
    "LendingPoolCoreUpdated(address)": EventFragment;
    "LendingPoolDataProviderUpdated(address)": EventFragment;
    "LendingPoolLiquidationManagerUpdated(address)": EventFragment;
    "LendingPoolManagerUpdated(address)": EventFragment;
    "LendingPoolParametersProviderUpdated(address)": EventFragment;
    "LendingPoolUpdated(address)": EventFragment;
    "LendingRateOracleUpdated(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PriceOracleUpdated(address)": EventFragment;
    "ProxyCreated(bytes32,address)": EventFragment;
    "TokenDistributorUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EthereumAddressUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeProviderUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LendingPoolConfiguratorUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LendingPoolCoreUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LendingPoolDataProviderUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LendingPoolLiquidationManagerUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LendingPoolManagerUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LendingPoolParametersProviderUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LendingPoolUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LendingRateOracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceOracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDistributorUpdated"): EventFragment;
}

export class LendingPoolAddressesProvider extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LendingPoolAddressesProviderInterface;

  functions: {
    getAddress(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getAddress(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Returns true if the caller is the current owner.
     */
    "isOwner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    /**
     * Returns the address of the current owner.
     */
    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * returns the address of the LendingPool proxy
     * @returns the lending pool proxy address*
     */
    getLendingPool(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * returns the address of the LendingPool proxy
     * @returns the lending pool proxy address*
     */
    "getLendingPool()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * updates the implementation of the lending pool
     * @param _pool the new lending pool implementation*
     */
    setLendingPoolImpl(
      _pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * updates the implementation of the lending pool
     * @param _pool the new lending pool implementation*
     */
    "setLendingPoolImpl(address)"(
      _pool: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * returns the address of the LendingPoolCore proxy
     * @returns the lending pool core proxy address
     */
    getLendingPoolCore(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * returns the address of the LendingPoolCore proxy
     * @returns the lending pool core proxy address
     */
    "getLendingPoolCore()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * updates the implementation of the lending pool core
     * @param _lendingPoolCore the new lending pool core implementation*
     */
    setLendingPoolCoreImpl(
      _lendingPoolCore: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * updates the implementation of the lending pool core
     * @param _lendingPoolCore the new lending pool core implementation*
     */
    "setLendingPoolCoreImpl(address)"(
      _lendingPoolCore: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * returns the address of the LendingPoolConfigurator proxy
     * @returns the lending pool configurator proxy address*
     */
    getLendingPoolConfigurator(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * returns the address of the LendingPoolConfigurator proxy
     * @returns the lending pool configurator proxy address*
     */
    "getLendingPoolConfigurator()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * updates the implementation of the lending pool configurator
     * @param _configurator the new lending pool configurator implementation*
     */
    setLendingPoolConfiguratorImpl(
      _configurator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * updates the implementation of the lending pool configurator
     * @param _configurator the new lending pool configurator implementation*
     */
    "setLendingPoolConfiguratorImpl(address)"(
      _configurator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * returns the address of the LendingPoolDataProvider proxy
     * @returns the lending pool data provider proxy address
     */
    getLendingPoolDataProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * returns the address of the LendingPoolDataProvider proxy
     * @returns the lending pool data provider proxy address
     */
    "getLendingPoolDataProvider()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * updates the implementation of the lending pool data provider
     * @param _provider the new lending pool data provider implementation*
     */
    setLendingPoolDataProviderImpl(
      _provider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * updates the implementation of the lending pool data provider
     * @param _provider the new lending pool data provider implementation*
     */
    "setLendingPoolDataProviderImpl(address)"(
      _provider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * returns the address of the LendingPoolParametersProvider proxy
     * @returns the address of the Lending pool parameters provider proxy*
     */
    getLendingPoolParametersProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * returns the address of the LendingPoolParametersProvider proxy
     * @returns the address of the Lending pool parameters provider proxy*
     */
    "getLendingPoolParametersProvider()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * updates the implementation of the lending pool parameters provider
     * @param _parametersProvider the new lending pool parameters provider implementation*
     */
    setLendingPoolParametersProviderImpl(
      _parametersProvider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * updates the implementation of the lending pool parameters provider
     * @param _parametersProvider the new lending pool parameters provider implementation*
     */
    "setLendingPoolParametersProviderImpl(address)"(
      _parametersProvider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * returns the address of the FeeProvider proxy
     * @returns the address of the Fee provider proxy*
     */
    getFeeProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * returns the address of the FeeProvider proxy
     * @returns the address of the Fee provider proxy*
     */
    "getFeeProvider()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * updates the implementation of the FeeProvider proxy
     * @param _feeProvider the new lending pool fee provider implementation*
     */
    setFeeProviderImpl(
      _feeProvider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * updates the implementation of the FeeProvider proxy
     * @param _feeProvider the new lending pool fee provider implementation*
     */
    "setFeeProviderImpl(address)"(
      _feeProvider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * returns the address of the LendingPoolLiquidationManager. Since the manager is used through delegateCall within the LendingPool contract, the proxy contract pattern does not work properly hence the addresses are changed directly.
     * @returns the address of the Lending pool liquidation manager*
     */
    getLendingPoolLiquidationManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * returns the address of the LendingPoolLiquidationManager. Since the manager is used through delegateCall within the LendingPool contract, the proxy contract pattern does not work properly hence the addresses are changed directly.
     * @returns the address of the Lending pool liquidation manager*
     */
    "getLendingPoolLiquidationManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * updates the address of the Lending pool liquidation manager
     * @param _manager the new lending pool liquidation manager address*
     */
    setLendingPoolLiquidationManager(
      _manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * updates the address of the Lending pool liquidation manager
     * @param _manager the new lending pool liquidation manager address*
     */
    "setLendingPoolLiquidationManager(address)"(
      _manager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * the functions below are storing specific addresses that are outside the context of the protocol hence the upgradable proxy pattern is not used*
     */
    getLendingPoolManager(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    /**
     * the functions below are storing specific addresses that are outside the context of the protocol hence the upgradable proxy pattern is not used*
     */
    "getLendingPoolManager()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setLendingPoolManager(
      _lendingPoolManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLendingPoolManager(address)"(
      _lendingPoolManager: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getPriceOracle(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getPriceOracle()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setPriceOracle(
      _priceOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPriceOracle(address)"(
      _priceOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getLendingRateOracle(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getLendingRateOracle()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setLendingRateOracle(
      _lendingRateOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLendingRateOracle(address)"(
      _lendingRateOracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getTokenDistributor(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "getTokenDistributor()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    setTokenDistributor(
      _tokenDistributor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTokenDistributor(address)"(
      _tokenDistributor: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getAddress(_key: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getAddress(bytes32)"(
    _key: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * Returns true if the caller is the current owner.
   */
  isOwner(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Returns true if the caller is the current owner.
   */
  "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Returns the address of the current owner.
   */
  "owner()"(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
   */
  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * returns the address of the LendingPool proxy
   * @returns the lending pool proxy address*
   */
  getLendingPool(overrides?: CallOverrides): Promise<string>;

  /**
   * returns the address of the LendingPool proxy
   * @returns the lending pool proxy address*
   */
  "getLendingPool()"(overrides?: CallOverrides): Promise<string>;

  /**
   * updates the implementation of the lending pool
   * @param _pool the new lending pool implementation*
   */
  setLendingPoolImpl(
    _pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * updates the implementation of the lending pool
   * @param _pool the new lending pool implementation*
   */
  "setLendingPoolImpl(address)"(
    _pool: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * returns the address of the LendingPoolCore proxy
   * @returns the lending pool core proxy address
   */
  getLendingPoolCore(overrides?: CallOverrides): Promise<string>;

  /**
   * returns the address of the LendingPoolCore proxy
   * @returns the lending pool core proxy address
   */
  "getLendingPoolCore()"(overrides?: CallOverrides): Promise<string>;

  /**
   * updates the implementation of the lending pool core
   * @param _lendingPoolCore the new lending pool core implementation*
   */
  setLendingPoolCoreImpl(
    _lendingPoolCore: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * updates the implementation of the lending pool core
   * @param _lendingPoolCore the new lending pool core implementation*
   */
  "setLendingPoolCoreImpl(address)"(
    _lendingPoolCore: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * returns the address of the LendingPoolConfigurator proxy
   * @returns the lending pool configurator proxy address*
   */
  getLendingPoolConfigurator(overrides?: CallOverrides): Promise<string>;

  /**
   * returns the address of the LendingPoolConfigurator proxy
   * @returns the lending pool configurator proxy address*
   */
  "getLendingPoolConfigurator()"(overrides?: CallOverrides): Promise<string>;

  /**
   * updates the implementation of the lending pool configurator
   * @param _configurator the new lending pool configurator implementation*
   */
  setLendingPoolConfiguratorImpl(
    _configurator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * updates the implementation of the lending pool configurator
   * @param _configurator the new lending pool configurator implementation*
   */
  "setLendingPoolConfiguratorImpl(address)"(
    _configurator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * returns the address of the LendingPoolDataProvider proxy
   * @returns the lending pool data provider proxy address
   */
  getLendingPoolDataProvider(overrides?: CallOverrides): Promise<string>;

  /**
   * returns the address of the LendingPoolDataProvider proxy
   * @returns the lending pool data provider proxy address
   */
  "getLendingPoolDataProvider()"(overrides?: CallOverrides): Promise<string>;

  /**
   * updates the implementation of the lending pool data provider
   * @param _provider the new lending pool data provider implementation*
   */
  setLendingPoolDataProviderImpl(
    _provider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * updates the implementation of the lending pool data provider
   * @param _provider the new lending pool data provider implementation*
   */
  "setLendingPoolDataProviderImpl(address)"(
    _provider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * returns the address of the LendingPoolParametersProvider proxy
   * @returns the address of the Lending pool parameters provider proxy*
   */
  getLendingPoolParametersProvider(overrides?: CallOverrides): Promise<string>;

  /**
   * returns the address of the LendingPoolParametersProvider proxy
   * @returns the address of the Lending pool parameters provider proxy*
   */
  "getLendingPoolParametersProvider()"(
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * updates the implementation of the lending pool parameters provider
   * @param _parametersProvider the new lending pool parameters provider implementation*
   */
  setLendingPoolParametersProviderImpl(
    _parametersProvider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * updates the implementation of the lending pool parameters provider
   * @param _parametersProvider the new lending pool parameters provider implementation*
   */
  "setLendingPoolParametersProviderImpl(address)"(
    _parametersProvider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * returns the address of the FeeProvider proxy
   * @returns the address of the Fee provider proxy*
   */
  getFeeProvider(overrides?: CallOverrides): Promise<string>;

  /**
   * returns the address of the FeeProvider proxy
   * @returns the address of the Fee provider proxy*
   */
  "getFeeProvider()"(overrides?: CallOverrides): Promise<string>;

  /**
   * updates the implementation of the FeeProvider proxy
   * @param _feeProvider the new lending pool fee provider implementation*
   */
  setFeeProviderImpl(
    _feeProvider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * updates the implementation of the FeeProvider proxy
   * @param _feeProvider the new lending pool fee provider implementation*
   */
  "setFeeProviderImpl(address)"(
    _feeProvider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * returns the address of the LendingPoolLiquidationManager. Since the manager is used through delegateCall within the LendingPool contract, the proxy contract pattern does not work properly hence the addresses are changed directly.
   * @returns the address of the Lending pool liquidation manager*
   */
  getLendingPoolLiquidationManager(overrides?: CallOverrides): Promise<string>;

  /**
   * returns the address of the LendingPoolLiquidationManager. Since the manager is used through delegateCall within the LendingPool contract, the proxy contract pattern does not work properly hence the addresses are changed directly.
   * @returns the address of the Lending pool liquidation manager*
   */
  "getLendingPoolLiquidationManager()"(
    overrides?: CallOverrides
  ): Promise<string>;

  /**
   * updates the address of the Lending pool liquidation manager
   * @param _manager the new lending pool liquidation manager address*
   */
  setLendingPoolLiquidationManager(
    _manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * updates the address of the Lending pool liquidation manager
   * @param _manager the new lending pool liquidation manager address*
   */
  "setLendingPoolLiquidationManager(address)"(
    _manager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * the functions below are storing specific addresses that are outside the context of the protocol hence the upgradable proxy pattern is not used*
   */
  getLendingPoolManager(overrides?: CallOverrides): Promise<string>;

  /**
   * the functions below are storing specific addresses that are outside the context of the protocol hence the upgradable proxy pattern is not used*
   */
  "getLendingPoolManager()"(overrides?: CallOverrides): Promise<string>;

  setLendingPoolManager(
    _lendingPoolManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLendingPoolManager(address)"(
    _lendingPoolManager: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getPriceOracle(overrides?: CallOverrides): Promise<string>;

  "getPriceOracle()"(overrides?: CallOverrides): Promise<string>;

  setPriceOracle(
    _priceOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPriceOracle(address)"(
    _priceOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getLendingRateOracle(overrides?: CallOverrides): Promise<string>;

  "getLendingRateOracle()"(overrides?: CallOverrides): Promise<string>;

  setLendingRateOracle(
    _lendingRateOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLendingRateOracle(address)"(
    _lendingRateOracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getTokenDistributor(overrides?: CallOverrides): Promise<string>;

  "getTokenDistributor()"(overrides?: CallOverrides): Promise<string>;

  setTokenDistributor(
    _tokenDistributor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTokenDistributor(address)"(
    _tokenDistributor: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getAddress(_key: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getAddress(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Returns true if the caller is the current owner.
     */
    "isOwner()"(overrides?: CallOverrides): Promise<boolean>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * returns the address of the LendingPool proxy
     * @returns the lending pool proxy address*
     */
    getLendingPool(overrides?: CallOverrides): Promise<string>;

    /**
     * returns the address of the LendingPool proxy
     * @returns the lending pool proxy address*
     */
    "getLendingPool()"(overrides?: CallOverrides): Promise<string>;

    /**
     * updates the implementation of the lending pool
     * @param _pool the new lending pool implementation*
     */
    setLendingPoolImpl(_pool: string, overrides?: CallOverrides): Promise<void>;

    /**
     * updates the implementation of the lending pool
     * @param _pool the new lending pool implementation*
     */
    "setLendingPoolImpl(address)"(
      _pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * returns the address of the LendingPoolCore proxy
     * @returns the lending pool core proxy address
     */
    getLendingPoolCore(overrides?: CallOverrides): Promise<string>;

    /**
     * returns the address of the LendingPoolCore proxy
     * @returns the lending pool core proxy address
     */
    "getLendingPoolCore()"(overrides?: CallOverrides): Promise<string>;

    /**
     * updates the implementation of the lending pool core
     * @param _lendingPoolCore the new lending pool core implementation*
     */
    setLendingPoolCoreImpl(
      _lendingPoolCore: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * updates the implementation of the lending pool core
     * @param _lendingPoolCore the new lending pool core implementation*
     */
    "setLendingPoolCoreImpl(address)"(
      _lendingPoolCore: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * returns the address of the LendingPoolConfigurator proxy
     * @returns the lending pool configurator proxy address*
     */
    getLendingPoolConfigurator(overrides?: CallOverrides): Promise<string>;

    /**
     * returns the address of the LendingPoolConfigurator proxy
     * @returns the lending pool configurator proxy address*
     */
    "getLendingPoolConfigurator()"(overrides?: CallOverrides): Promise<string>;

    /**
     * updates the implementation of the lending pool configurator
     * @param _configurator the new lending pool configurator implementation*
     */
    setLendingPoolConfiguratorImpl(
      _configurator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * updates the implementation of the lending pool configurator
     * @param _configurator the new lending pool configurator implementation*
     */
    "setLendingPoolConfiguratorImpl(address)"(
      _configurator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * returns the address of the LendingPoolDataProvider proxy
     * @returns the lending pool data provider proxy address
     */
    getLendingPoolDataProvider(overrides?: CallOverrides): Promise<string>;

    /**
     * returns the address of the LendingPoolDataProvider proxy
     * @returns the lending pool data provider proxy address
     */
    "getLendingPoolDataProvider()"(overrides?: CallOverrides): Promise<string>;

    /**
     * updates the implementation of the lending pool data provider
     * @param _provider the new lending pool data provider implementation*
     */
    setLendingPoolDataProviderImpl(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * updates the implementation of the lending pool data provider
     * @param _provider the new lending pool data provider implementation*
     */
    "setLendingPoolDataProviderImpl(address)"(
      _provider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * returns the address of the LendingPoolParametersProvider proxy
     * @returns the address of the Lending pool parameters provider proxy*
     */
    getLendingPoolParametersProvider(
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * returns the address of the LendingPoolParametersProvider proxy
     * @returns the address of the Lending pool parameters provider proxy*
     */
    "getLendingPoolParametersProvider()"(
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * updates the implementation of the lending pool parameters provider
     * @param _parametersProvider the new lending pool parameters provider implementation*
     */
    setLendingPoolParametersProviderImpl(
      _parametersProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * updates the implementation of the lending pool parameters provider
     * @param _parametersProvider the new lending pool parameters provider implementation*
     */
    "setLendingPoolParametersProviderImpl(address)"(
      _parametersProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * returns the address of the FeeProvider proxy
     * @returns the address of the Fee provider proxy*
     */
    getFeeProvider(overrides?: CallOverrides): Promise<string>;

    /**
     * returns the address of the FeeProvider proxy
     * @returns the address of the Fee provider proxy*
     */
    "getFeeProvider()"(overrides?: CallOverrides): Promise<string>;

    /**
     * updates the implementation of the FeeProvider proxy
     * @param _feeProvider the new lending pool fee provider implementation*
     */
    setFeeProviderImpl(
      _feeProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * updates the implementation of the FeeProvider proxy
     * @param _feeProvider the new lending pool fee provider implementation*
     */
    "setFeeProviderImpl(address)"(
      _feeProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * returns the address of the LendingPoolLiquidationManager. Since the manager is used through delegateCall within the LendingPool contract, the proxy contract pattern does not work properly hence the addresses are changed directly.
     * @returns the address of the Lending pool liquidation manager*
     */
    getLendingPoolLiquidationManager(
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * returns the address of the LendingPoolLiquidationManager. Since the manager is used through delegateCall within the LendingPool contract, the proxy contract pattern does not work properly hence the addresses are changed directly.
     * @returns the address of the Lending pool liquidation manager*
     */
    "getLendingPoolLiquidationManager()"(
      overrides?: CallOverrides
    ): Promise<string>;

    /**
     * updates the address of the Lending pool liquidation manager
     * @param _manager the new lending pool liquidation manager address*
     */
    setLendingPoolLiquidationManager(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * updates the address of the Lending pool liquidation manager
     * @param _manager the new lending pool liquidation manager address*
     */
    "setLendingPoolLiquidationManager(address)"(
      _manager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * the functions below are storing specific addresses that are outside the context of the protocol hence the upgradable proxy pattern is not used*
     */
    getLendingPoolManager(overrides?: CallOverrides): Promise<string>;

    /**
     * the functions below are storing specific addresses that are outside the context of the protocol hence the upgradable proxy pattern is not used*
     */
    "getLendingPoolManager()"(overrides?: CallOverrides): Promise<string>;

    setLendingPoolManager(
      _lendingPoolManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLendingPoolManager(address)"(
      _lendingPoolManager: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getPriceOracle(overrides?: CallOverrides): Promise<string>;

    "getPriceOracle()"(overrides?: CallOverrides): Promise<string>;

    setPriceOracle(
      _priceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPriceOracle(address)"(
      _priceOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getLendingRateOracle(overrides?: CallOverrides): Promise<string>;

    "getLendingRateOracle()"(overrides?: CallOverrides): Promise<string>;

    setLendingRateOracle(
      _lendingRateOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLendingRateOracle(address)"(
      _lendingRateOracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getTokenDistributor(overrides?: CallOverrides): Promise<string>;

    "getTokenDistributor()"(overrides?: CallOverrides): Promise<string>;

    setTokenDistributor(
      _tokenDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenDistributor(address)"(
      _tokenDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    EthereumAddressUpdated(newAddress: string | null): EventFilter;

    FeeProviderUpdated(newAddress: string | null): EventFilter;

    LendingPoolConfiguratorUpdated(newAddress: string | null): EventFilter;

    LendingPoolCoreUpdated(newAddress: string | null): EventFilter;

    LendingPoolDataProviderUpdated(newAddress: string | null): EventFilter;

    LendingPoolLiquidationManagerUpdated(
      newAddress: string | null
    ): EventFilter;

    LendingPoolManagerUpdated(newAddress: string | null): EventFilter;

    LendingPoolParametersProviderUpdated(
      newAddress: string | null
    ): EventFilter;

    LendingPoolUpdated(newAddress: string | null): EventFilter;

    LendingRateOracleUpdated(newAddress: string | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    PriceOracleUpdated(newAddress: string | null): EventFilter;

    ProxyCreated(id: null, newAddress: string | null): EventFilter;

    TokenDistributorUpdated(newAddress: string | null): EventFilter;
  };

  estimateGas: {
    getAddress(_key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getAddress(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns true if the caller is the current owner.
     */
    "isOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * returns the address of the LendingPool proxy
     * @returns the lending pool proxy address*
     */
    getLendingPool(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * returns the address of the LendingPool proxy
     * @returns the lending pool proxy address*
     */
    "getLendingPool()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * updates the implementation of the lending pool
     * @param _pool the new lending pool implementation*
     */
    setLendingPoolImpl(
      _pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * updates the implementation of the lending pool
     * @param _pool the new lending pool implementation*
     */
    "setLendingPoolImpl(address)"(
      _pool: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * returns the address of the LendingPoolCore proxy
     * @returns the lending pool core proxy address
     */
    getLendingPoolCore(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * returns the address of the LendingPoolCore proxy
     * @returns the lending pool core proxy address
     */
    "getLendingPoolCore()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * updates the implementation of the lending pool core
     * @param _lendingPoolCore the new lending pool core implementation*
     */
    setLendingPoolCoreImpl(
      _lendingPoolCore: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * updates the implementation of the lending pool core
     * @param _lendingPoolCore the new lending pool core implementation*
     */
    "setLendingPoolCoreImpl(address)"(
      _lendingPoolCore: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * returns the address of the LendingPoolConfigurator proxy
     * @returns the lending pool configurator proxy address*
     */
    getLendingPoolConfigurator(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * returns the address of the LendingPoolConfigurator proxy
     * @returns the lending pool configurator proxy address*
     */
    "getLendingPoolConfigurator()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * updates the implementation of the lending pool configurator
     * @param _configurator the new lending pool configurator implementation*
     */
    setLendingPoolConfiguratorImpl(
      _configurator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * updates the implementation of the lending pool configurator
     * @param _configurator the new lending pool configurator implementation*
     */
    "setLendingPoolConfiguratorImpl(address)"(
      _configurator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * returns the address of the LendingPoolDataProvider proxy
     * @returns the lending pool data provider proxy address
     */
    getLendingPoolDataProvider(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * returns the address of the LendingPoolDataProvider proxy
     * @returns the lending pool data provider proxy address
     */
    "getLendingPoolDataProvider()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * updates the implementation of the lending pool data provider
     * @param _provider the new lending pool data provider implementation*
     */
    setLendingPoolDataProviderImpl(
      _provider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * updates the implementation of the lending pool data provider
     * @param _provider the new lending pool data provider implementation*
     */
    "setLendingPoolDataProviderImpl(address)"(
      _provider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * returns the address of the LendingPoolParametersProvider proxy
     * @returns the address of the Lending pool parameters provider proxy*
     */
    getLendingPoolParametersProvider(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * returns the address of the LendingPoolParametersProvider proxy
     * @returns the address of the Lending pool parameters provider proxy*
     */
    "getLendingPoolParametersProvider()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * updates the implementation of the lending pool parameters provider
     * @param _parametersProvider the new lending pool parameters provider implementation*
     */
    setLendingPoolParametersProviderImpl(
      _parametersProvider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * updates the implementation of the lending pool parameters provider
     * @param _parametersProvider the new lending pool parameters provider implementation*
     */
    "setLendingPoolParametersProviderImpl(address)"(
      _parametersProvider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * returns the address of the FeeProvider proxy
     * @returns the address of the Fee provider proxy*
     */
    getFeeProvider(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * returns the address of the FeeProvider proxy
     * @returns the address of the Fee provider proxy*
     */
    "getFeeProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * updates the implementation of the FeeProvider proxy
     * @param _feeProvider the new lending pool fee provider implementation*
     */
    setFeeProviderImpl(
      _feeProvider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * updates the implementation of the FeeProvider proxy
     * @param _feeProvider the new lending pool fee provider implementation*
     */
    "setFeeProviderImpl(address)"(
      _feeProvider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * returns the address of the LendingPoolLiquidationManager. Since the manager is used through delegateCall within the LendingPool contract, the proxy contract pattern does not work properly hence the addresses are changed directly.
     * @returns the address of the Lending pool liquidation manager*
     */
    getLendingPoolLiquidationManager(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * returns the address of the LendingPoolLiquidationManager. Since the manager is used through delegateCall within the LendingPool contract, the proxy contract pattern does not work properly hence the addresses are changed directly.
     * @returns the address of the Lending pool liquidation manager*
     */
    "getLendingPoolLiquidationManager()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * updates the address of the Lending pool liquidation manager
     * @param _manager the new lending pool liquidation manager address*
     */
    setLendingPoolLiquidationManager(
      _manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * updates the address of the Lending pool liquidation manager
     * @param _manager the new lending pool liquidation manager address*
     */
    "setLendingPoolLiquidationManager(address)"(
      _manager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * the functions below are storing specific addresses that are outside the context of the protocol hence the upgradable proxy pattern is not used*
     */
    getLendingPoolManager(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * the functions below are storing specific addresses that are outside the context of the protocol hence the upgradable proxy pattern is not used*
     */
    "getLendingPoolManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    setLendingPoolManager(
      _lendingPoolManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLendingPoolManager(address)"(
      _lendingPoolManager: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "getPriceOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    setPriceOracle(
      _priceOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setPriceOracle(address)"(
      _priceOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getLendingRateOracle(overrides?: CallOverrides): Promise<BigNumber>;

    "getLendingRateOracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    setLendingRateOracle(
      _lendingRateOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLendingRateOracle(address)"(
      _lendingRateOracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getTokenDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    "getTokenDistributor()"(overrides?: CallOverrides): Promise<BigNumber>;

    setTokenDistributor(
      _tokenDistributor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTokenDistributor(address)"(
      _tokenDistributor: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAddress(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAddress(bytes32)"(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns true if the caller is the current owner.
     */
    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns true if the caller is the current owner.
     */
    "isOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * returns the address of the LendingPool proxy
     * @returns the lending pool proxy address*
     */
    getLendingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * returns the address of the LendingPool proxy
     * @returns the lending pool proxy address*
     */
    "getLendingPool()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the implementation of the lending pool
     * @param _pool the new lending pool implementation*
     */
    setLendingPoolImpl(
      _pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the implementation of the lending pool
     * @param _pool the new lending pool implementation*
     */
    "setLendingPoolImpl(address)"(
      _pool: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * returns the address of the LendingPoolCore proxy
     * @returns the lending pool core proxy address
     */
    getLendingPoolCore(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * returns the address of the LendingPoolCore proxy
     * @returns the lending pool core proxy address
     */
    "getLendingPoolCore()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the implementation of the lending pool core
     * @param _lendingPoolCore the new lending pool core implementation*
     */
    setLendingPoolCoreImpl(
      _lendingPoolCore: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the implementation of the lending pool core
     * @param _lendingPoolCore the new lending pool core implementation*
     */
    "setLendingPoolCoreImpl(address)"(
      _lendingPoolCore: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * returns the address of the LendingPoolConfigurator proxy
     * @returns the lending pool configurator proxy address*
     */
    getLendingPoolConfigurator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * returns the address of the LendingPoolConfigurator proxy
     * @returns the lending pool configurator proxy address*
     */
    "getLendingPoolConfigurator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the implementation of the lending pool configurator
     * @param _configurator the new lending pool configurator implementation*
     */
    setLendingPoolConfiguratorImpl(
      _configurator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the implementation of the lending pool configurator
     * @param _configurator the new lending pool configurator implementation*
     */
    "setLendingPoolConfiguratorImpl(address)"(
      _configurator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * returns the address of the LendingPoolDataProvider proxy
     * @returns the lending pool data provider proxy address
     */
    getLendingPoolDataProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * returns the address of the LendingPoolDataProvider proxy
     * @returns the lending pool data provider proxy address
     */
    "getLendingPoolDataProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the implementation of the lending pool data provider
     * @param _provider the new lending pool data provider implementation*
     */
    setLendingPoolDataProviderImpl(
      _provider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the implementation of the lending pool data provider
     * @param _provider the new lending pool data provider implementation*
     */
    "setLendingPoolDataProviderImpl(address)"(
      _provider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * returns the address of the LendingPoolParametersProvider proxy
     * @returns the address of the Lending pool parameters provider proxy*
     */
    getLendingPoolParametersProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * returns the address of the LendingPoolParametersProvider proxy
     * @returns the address of the Lending pool parameters provider proxy*
     */
    "getLendingPoolParametersProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the implementation of the lending pool parameters provider
     * @param _parametersProvider the new lending pool parameters provider implementation*
     */
    setLendingPoolParametersProviderImpl(
      _parametersProvider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the implementation of the lending pool parameters provider
     * @param _parametersProvider the new lending pool parameters provider implementation*
     */
    "setLendingPoolParametersProviderImpl(address)"(
      _parametersProvider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * returns the address of the FeeProvider proxy
     * @returns the address of the Fee provider proxy*
     */
    getFeeProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * returns the address of the FeeProvider proxy
     * @returns the address of the Fee provider proxy*
     */
    "getFeeProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the implementation of the FeeProvider proxy
     * @param _feeProvider the new lending pool fee provider implementation*
     */
    setFeeProviderImpl(
      _feeProvider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the implementation of the FeeProvider proxy
     * @param _feeProvider the new lending pool fee provider implementation*
     */
    "setFeeProviderImpl(address)"(
      _feeProvider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * returns the address of the LendingPoolLiquidationManager. Since the manager is used through delegateCall within the LendingPool contract, the proxy contract pattern does not work properly hence the addresses are changed directly.
     * @returns the address of the Lending pool liquidation manager*
     */
    getLendingPoolLiquidationManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * returns the address of the LendingPoolLiquidationManager. Since the manager is used through delegateCall within the LendingPool contract, the proxy contract pattern does not work properly hence the addresses are changed directly.
     * @returns the address of the Lending pool liquidation manager*
     */
    "getLendingPoolLiquidationManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the address of the Lending pool liquidation manager
     * @param _manager the new lending pool liquidation manager address*
     */
    setLendingPoolLiquidationManager(
      _manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the address of the Lending pool liquidation manager
     * @param _manager the new lending pool liquidation manager address*
     */
    "setLendingPoolLiquidationManager(address)"(
      _manager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * the functions below are storing specific addresses that are outside the context of the protocol hence the upgradable proxy pattern is not used*
     */
    getLendingPoolManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * the functions below are storing specific addresses that are outside the context of the protocol hence the upgradable proxy pattern is not used*
     */
    "getLendingPoolManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLendingPoolManager(
      _lendingPoolManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLendingPoolManager(address)"(
      _lendingPoolManager: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getPriceOracle()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setPriceOracle(
      _priceOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPriceOracle(address)"(
      _priceOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getLendingRateOracle(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getLendingRateOracle()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLendingRateOracle(
      _lendingRateOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLendingRateOracle(address)"(
      _lendingRateOracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getTokenDistributor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTokenDistributor()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTokenDistributor(
      _tokenDistributor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTokenDistributor(address)"(
      _tokenDistributor: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
