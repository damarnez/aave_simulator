/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LendingPoolConfiguratorInterface extends ethers.utils.Interface {
  functions: {
    "CONFIGURATOR_REVISION()": FunctionFragment;
    "poolAddressesProvider()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "initReserve(address,uint8,address)": FunctionFragment;
    "initReserveWithData(address,string,string,uint8,address)": FunctionFragment;
    "removeLastAddedReserve(address)": FunctionFragment;
    "enableBorrowingOnReserve(address,bool)": FunctionFragment;
    "disableBorrowingOnReserve(address)": FunctionFragment;
    "enableReserveAsCollateral(address,uint256,uint256,uint256)": FunctionFragment;
    "disableReserveAsCollateral(address)": FunctionFragment;
    "enableReserveStableBorrowRate(address)": FunctionFragment;
    "disableReserveStableBorrowRate(address)": FunctionFragment;
    "activateReserve(address)": FunctionFragment;
    "deactivateReserve(address)": FunctionFragment;
    "freezeReserve(address)": FunctionFragment;
    "unfreezeReserve(address)": FunctionFragment;
    "setReserveBaseLTVasCollateral(address,uint256)": FunctionFragment;
    "setReserveLiquidationThreshold(address,uint256)": FunctionFragment;
    "setReserveLiquidationBonus(address,uint256)": FunctionFragment;
    "setReserveDecimals(address,uint256)": FunctionFragment;
    "setReserveInterestRateStrategyAddress(address,address)": FunctionFragment;
    "refreshLendingPoolCoreConfiguration()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CONFIGURATOR_REVISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolAddressesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "initReserve",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initReserveWithData",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLastAddedReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableBorrowingOnReserve",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "disableBorrowingOnReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableReserveAsCollateral",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "disableReserveAsCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "enableReserveStableBorrowRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "disableReserveStableBorrowRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "activateReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "freezeReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreezeReserve",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveBaseLTVasCollateral",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveLiquidationThreshold",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveLiquidationBonus",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveDecimals",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveInterestRateStrategyAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "refreshLendingPoolCoreConfiguration",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CONFIGURATOR_REVISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolAddressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initReserveWithData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLastAddedReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableBorrowingOnReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableBorrowingOnReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableReserveAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableReserveAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableReserveStableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableReserveStableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "activateReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deactivateReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unfreezeReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveBaseLTVasCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveLiquidationThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveLiquidationBonus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveInterestRateStrategyAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refreshLendingPoolCoreConfiguration",
    data: BytesLike
  ): Result;

  events: {
    "BorrowingDisabledOnReserve(address)": EventFragment;
    "BorrowingEnabledOnReserve(address,bool)": EventFragment;
    "ReserveActivated(address)": EventFragment;
    "ReserveBaseLtvChanged(address,uint256)": EventFragment;
    "ReserveDeactivated(address)": EventFragment;
    "ReserveDecimalsChanged(address,uint256)": EventFragment;
    "ReserveDisabledAsCollateral(address)": EventFragment;
    "ReserveEnabledAsCollateral(address,uint256,uint256,uint256)": EventFragment;
    "ReserveFreezed(address)": EventFragment;
    "ReserveInitialized(address,address,address)": EventFragment;
    "ReserveInterestRateStrategyChanged(address,address)": EventFragment;
    "ReserveLiquidationBonusChanged(address,uint256)": EventFragment;
    "ReserveLiquidationThresholdChanged(address,uint256)": EventFragment;
    "ReserveRemoved(address)": EventFragment;
    "ReserveUnfreezed(address)": EventFragment;
    "StableRateDisabledOnReserve(address)": EventFragment;
    "StableRateEnabledOnReserve(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BorrowingDisabledOnReserve"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowingEnabledOnReserve"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveActivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveBaseLtvChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveDeactivated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveDecimalsChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveDisabledAsCollateral"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveEnabledAsCollateral"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveFreezed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveInitialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveInterestRateStrategyChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveLiquidationBonusChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveLiquidationThresholdChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReserveUnfreezed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "StableRateDisabledOnReserve"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StableRateEnabledOnReserve"): EventFragment;
}

export class LendingPoolConfigurator extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LendingPoolConfiguratorInterface;

  functions: {
    CONFIGURATOR_REVISION(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "CONFIGURATOR_REVISION()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    poolAddressesProvider(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "poolAddressesProvider()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    initialize(
      _poolAddressesProvider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _poolAddressesProvider: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * initializes a reserve
     * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
     * @param _reserve the address of the reserve to be initialized
     * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
     */
    initReserve(
      _reserve: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * initializes a reserve
     * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
     * @param _reserve the address of the reserve to be initialized
     * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
     */
    "initReserve(address,uint8,address)"(
      _reserve: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * initializes a reserve using aTokenData provided externally (useful if the underlying ERC20 contract doesn't expose name or decimals)
     * @param _aTokenName the name of the aToken contract
     * @param _aTokenSymbol the symbol of the aToken contract
     * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
     * @param _reserve the address of the reserve to be initialized
     * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
     */
    initReserveWithData(
      _reserve: string,
      _aTokenName: string,
      _aTokenSymbol: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * initializes a reserve using aTokenData provided externally (useful if the underlying ERC20 contract doesn't expose name or decimals)
     * @param _aTokenName the name of the aToken contract
     * @param _aTokenSymbol the symbol of the aToken contract
     * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
     * @param _reserve the address of the reserve to be initialized
     * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
     */
    "initReserveWithData(address,string,string,uint8,address)"(
      _reserve: string,
      _aTokenName: string,
      _aTokenSymbol: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * removes the last added reserve in the list of the reserves
     * @param _reserveToRemove the address of the reserve*
     */
    removeLastAddedReserve(
      _reserveToRemove: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * removes the last added reserve in the list of the reserves
     * @param _reserveToRemove the address of the reserve*
     */
    "removeLastAddedReserve(address)"(
      _reserveToRemove: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * enables borrowing on a reserve
     * @param _reserve the address of the reserve
     * @param _stableBorrowRateEnabled true if stable borrow rate needs to be enabled by default on this reserve*
     */
    enableBorrowingOnReserve(
      _reserve: string,
      _stableBorrowRateEnabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * enables borrowing on a reserve
     * @param _reserve the address of the reserve
     * @param _stableBorrowRateEnabled true if stable borrow rate needs to be enabled by default on this reserve*
     */
    "enableBorrowingOnReserve(address,bool)"(
      _reserve: string,
      _stableBorrowRateEnabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * disables borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    disableBorrowingOnReserve(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * disables borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    "disableBorrowingOnReserve(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * enables a reserve to be used as collateral
     * @param _baseLTVasCollateral the loan to value of the asset when used as collateral
     * @param _liquidationBonus the bonus liquidators receive to liquidate this asset*
     * @param _liquidationThreshold the threshold at which loans using this asset as collateral will be considered undercollateralized
     * @param _reserve the address of the reserve
     */
    enableReserveAsCollateral(
      _reserve: string,
      _baseLTVasCollateral: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _liquidationBonus: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * enables a reserve to be used as collateral
     * @param _baseLTVasCollateral the loan to value of the asset when used as collateral
     * @param _liquidationBonus the bonus liquidators receive to liquidate this asset*
     * @param _liquidationThreshold the threshold at which loans using this asset as collateral will be considered undercollateralized
     * @param _reserve the address of the reserve
     */
    "enableReserveAsCollateral(address,uint256,uint256,uint256)"(
      _reserve: string,
      _baseLTVasCollateral: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _liquidationBonus: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * disables a reserve as collateral
     * @param _reserve the address of the reserve*
     */
    disableReserveAsCollateral(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * disables a reserve as collateral
     * @param _reserve the address of the reserve*
     */
    "disableReserveAsCollateral(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * enable stable rate borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    enableReserveStableBorrowRate(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * enable stable rate borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    "enableReserveStableBorrowRate(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * disable stable rate borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    disableReserveStableBorrowRate(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * disable stable rate borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    "disableReserveStableBorrowRate(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * activates a reserve
     * @param _reserve the address of the reserve*
     */
    activateReserve(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * activates a reserve
     * @param _reserve the address of the reserve*
     */
    "activateReserve(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * deactivates a reserve
     * @param _reserve the address of the reserve*
     */
    deactivateReserve(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * deactivates a reserve
     * @param _reserve the address of the reserve*
     */
    "deactivateReserve(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * freezes a reserve. A freezed reserve doesn't accept any new deposit, borrow or rate swap, but can accept repayments, liquidations, rate rebalances and redeems
     * @param _reserve the address of the reserve*
     */
    freezeReserve(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * freezes a reserve. A freezed reserve doesn't accept any new deposit, borrow or rate swap, but can accept repayments, liquidations, rate rebalances and redeems
     * @param _reserve the address of the reserve*
     */
    "freezeReserve(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * unfreezes a reserve
     * @param _reserve the address of the reserve*
     */
    unfreezeReserve(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * unfreezes a reserve
     * @param _reserve the address of the reserve*
     */
    "unfreezeReserve(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * emitted when a reserve loan to value is updated
     * @param _ltv the new value for the loan to value*
     * @param _reserve the address of the reserve
     */
    setReserveBaseLTVasCollateral(
      _reserve: string,
      _ltv: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * emitted when a reserve loan to value is updated
     * @param _ltv the new value for the loan to value*
     * @param _reserve the address of the reserve
     */
    "setReserveBaseLTVasCollateral(address,uint256)"(
      _reserve: string,
      _ltv: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * updates the liquidation threshold of a reserve.
     * @param _reserve the address of the reserve
     * @param _threshold the new value for the liquidation threshold*
     */
    setReserveLiquidationThreshold(
      _reserve: string,
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * updates the liquidation threshold of a reserve.
     * @param _reserve the address of the reserve
     * @param _threshold the new value for the liquidation threshold*
     */
    "setReserveLiquidationThreshold(address,uint256)"(
      _reserve: string,
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * updates the liquidation bonus of a reserve
     * @param _bonus the new value for the liquidation bonus*
     * @param _reserve the address of the reserve
     */
    setReserveLiquidationBonus(
      _reserve: string,
      _bonus: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * updates the liquidation bonus of a reserve
     * @param _bonus the new value for the liquidation bonus*
     * @param _reserve the address of the reserve
     */
    "setReserveLiquidationBonus(address,uint256)"(
      _reserve: string,
      _bonus: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * updates the reserve decimals
     * @param _decimals the new number of decimals*
     * @param _reserve the address of the reserve
     */
    setReserveDecimals(
      _reserve: string,
      _decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * updates the reserve decimals
     * @param _decimals the new number of decimals*
     * @param _reserve the address of the reserve
     */
    "setReserveDecimals(address,uint256)"(
      _reserve: string,
      _decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * sets the interest rate strategy of a reserve
     * @param _rateStrategyAddress the new address of the interest strategy contract*
     * @param _reserve the address of the reserve
     */
    setReserveInterestRateStrategyAddress(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * sets the interest rate strategy of a reserve
     * @param _rateStrategyAddress the new address of the interest strategy contract*
     * @param _reserve the address of the reserve
     */
    "setReserveInterestRateStrategyAddress(address,address)"(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * refreshes the lending pool core configuration to update the cached address*
     */
    refreshLendingPoolCoreConfiguration(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    /**
     * refreshes the lending pool core configuration to update the cached address*
     */
    "refreshLendingPoolCoreConfiguration()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  CONFIGURATOR_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  "CONFIGURATOR_REVISION()"(overrides?: CallOverrides): Promise<BigNumber>;

  poolAddressesProvider(overrides?: CallOverrides): Promise<string>;

  "poolAddressesProvider()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    _poolAddressesProvider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _poolAddressesProvider: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * initializes a reserve
   * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
   * @param _reserve the address of the reserve to be initialized
   * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
   */
  initReserve(
    _reserve: string,
    _underlyingAssetDecimals: BigNumberish,
    _interestRateStrategyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * initializes a reserve
   * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
   * @param _reserve the address of the reserve to be initialized
   * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
   */
  "initReserve(address,uint8,address)"(
    _reserve: string,
    _underlyingAssetDecimals: BigNumberish,
    _interestRateStrategyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * initializes a reserve using aTokenData provided externally (useful if the underlying ERC20 contract doesn't expose name or decimals)
   * @param _aTokenName the name of the aToken contract
   * @param _aTokenSymbol the symbol of the aToken contract
   * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
   * @param _reserve the address of the reserve to be initialized
   * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
   */
  initReserveWithData(
    _reserve: string,
    _aTokenName: string,
    _aTokenSymbol: string,
    _underlyingAssetDecimals: BigNumberish,
    _interestRateStrategyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * initializes a reserve using aTokenData provided externally (useful if the underlying ERC20 contract doesn't expose name or decimals)
   * @param _aTokenName the name of the aToken contract
   * @param _aTokenSymbol the symbol of the aToken contract
   * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
   * @param _reserve the address of the reserve to be initialized
   * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
   */
  "initReserveWithData(address,string,string,uint8,address)"(
    _reserve: string,
    _aTokenName: string,
    _aTokenSymbol: string,
    _underlyingAssetDecimals: BigNumberish,
    _interestRateStrategyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * removes the last added reserve in the list of the reserves
   * @param _reserveToRemove the address of the reserve*
   */
  removeLastAddedReserve(
    _reserveToRemove: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * removes the last added reserve in the list of the reserves
   * @param _reserveToRemove the address of the reserve*
   */
  "removeLastAddedReserve(address)"(
    _reserveToRemove: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * enables borrowing on a reserve
   * @param _reserve the address of the reserve
   * @param _stableBorrowRateEnabled true if stable borrow rate needs to be enabled by default on this reserve*
   */
  enableBorrowingOnReserve(
    _reserve: string,
    _stableBorrowRateEnabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * enables borrowing on a reserve
   * @param _reserve the address of the reserve
   * @param _stableBorrowRateEnabled true if stable borrow rate needs to be enabled by default on this reserve*
   */
  "enableBorrowingOnReserve(address,bool)"(
    _reserve: string,
    _stableBorrowRateEnabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * disables borrowing on a reserve
   * @param _reserve the address of the reserve*
   */
  disableBorrowingOnReserve(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * disables borrowing on a reserve
   * @param _reserve the address of the reserve*
   */
  "disableBorrowingOnReserve(address)"(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * enables a reserve to be used as collateral
   * @param _baseLTVasCollateral the loan to value of the asset when used as collateral
   * @param _liquidationBonus the bonus liquidators receive to liquidate this asset*
   * @param _liquidationThreshold the threshold at which loans using this asset as collateral will be considered undercollateralized
   * @param _reserve the address of the reserve
   */
  enableReserveAsCollateral(
    _reserve: string,
    _baseLTVasCollateral: BigNumberish,
    _liquidationThreshold: BigNumberish,
    _liquidationBonus: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * enables a reserve to be used as collateral
   * @param _baseLTVasCollateral the loan to value of the asset when used as collateral
   * @param _liquidationBonus the bonus liquidators receive to liquidate this asset*
   * @param _liquidationThreshold the threshold at which loans using this asset as collateral will be considered undercollateralized
   * @param _reserve the address of the reserve
   */
  "enableReserveAsCollateral(address,uint256,uint256,uint256)"(
    _reserve: string,
    _baseLTVasCollateral: BigNumberish,
    _liquidationThreshold: BigNumberish,
    _liquidationBonus: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * disables a reserve as collateral
   * @param _reserve the address of the reserve*
   */
  disableReserveAsCollateral(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * disables a reserve as collateral
   * @param _reserve the address of the reserve*
   */
  "disableReserveAsCollateral(address)"(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * enable stable rate borrowing on a reserve
   * @param _reserve the address of the reserve*
   */
  enableReserveStableBorrowRate(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * enable stable rate borrowing on a reserve
   * @param _reserve the address of the reserve*
   */
  "enableReserveStableBorrowRate(address)"(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * disable stable rate borrowing on a reserve
   * @param _reserve the address of the reserve*
   */
  disableReserveStableBorrowRate(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * disable stable rate borrowing on a reserve
   * @param _reserve the address of the reserve*
   */
  "disableReserveStableBorrowRate(address)"(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * activates a reserve
   * @param _reserve the address of the reserve*
   */
  activateReserve(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * activates a reserve
   * @param _reserve the address of the reserve*
   */
  "activateReserve(address)"(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * deactivates a reserve
   * @param _reserve the address of the reserve*
   */
  deactivateReserve(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * deactivates a reserve
   * @param _reserve the address of the reserve*
   */
  "deactivateReserve(address)"(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * freezes a reserve. A freezed reserve doesn't accept any new deposit, borrow or rate swap, but can accept repayments, liquidations, rate rebalances and redeems
   * @param _reserve the address of the reserve*
   */
  freezeReserve(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * freezes a reserve. A freezed reserve doesn't accept any new deposit, borrow or rate swap, but can accept repayments, liquidations, rate rebalances and redeems
   * @param _reserve the address of the reserve*
   */
  "freezeReserve(address)"(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * unfreezes a reserve
   * @param _reserve the address of the reserve*
   */
  unfreezeReserve(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * unfreezes a reserve
   * @param _reserve the address of the reserve*
   */
  "unfreezeReserve(address)"(
    _reserve: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * emitted when a reserve loan to value is updated
   * @param _ltv the new value for the loan to value*
   * @param _reserve the address of the reserve
   */
  setReserveBaseLTVasCollateral(
    _reserve: string,
    _ltv: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * emitted when a reserve loan to value is updated
   * @param _ltv the new value for the loan to value*
   * @param _reserve the address of the reserve
   */
  "setReserveBaseLTVasCollateral(address,uint256)"(
    _reserve: string,
    _ltv: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * updates the liquidation threshold of a reserve.
   * @param _reserve the address of the reserve
   * @param _threshold the new value for the liquidation threshold*
   */
  setReserveLiquidationThreshold(
    _reserve: string,
    _threshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * updates the liquidation threshold of a reserve.
   * @param _reserve the address of the reserve
   * @param _threshold the new value for the liquidation threshold*
   */
  "setReserveLiquidationThreshold(address,uint256)"(
    _reserve: string,
    _threshold: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * updates the liquidation bonus of a reserve
   * @param _bonus the new value for the liquidation bonus*
   * @param _reserve the address of the reserve
   */
  setReserveLiquidationBonus(
    _reserve: string,
    _bonus: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * updates the liquidation bonus of a reserve
   * @param _bonus the new value for the liquidation bonus*
   * @param _reserve the address of the reserve
   */
  "setReserveLiquidationBonus(address,uint256)"(
    _reserve: string,
    _bonus: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * updates the reserve decimals
   * @param _decimals the new number of decimals*
   * @param _reserve the address of the reserve
   */
  setReserveDecimals(
    _reserve: string,
    _decimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * updates the reserve decimals
   * @param _decimals the new number of decimals*
   * @param _reserve the address of the reserve
   */
  "setReserveDecimals(address,uint256)"(
    _reserve: string,
    _decimals: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * sets the interest rate strategy of a reserve
   * @param _rateStrategyAddress the new address of the interest strategy contract*
   * @param _reserve the address of the reserve
   */
  setReserveInterestRateStrategyAddress(
    _reserve: string,
    _rateStrategyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * sets the interest rate strategy of a reserve
   * @param _rateStrategyAddress the new address of the interest strategy contract*
   * @param _reserve the address of the reserve
   */
  "setReserveInterestRateStrategyAddress(address,address)"(
    _reserve: string,
    _rateStrategyAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * refreshes the lending pool core configuration to update the cached address*
   */
  refreshLendingPoolCoreConfiguration(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  /**
   * refreshes the lending pool core configuration to update the cached address*
   */
  "refreshLendingPoolCoreConfiguration()"(
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    CONFIGURATOR_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    "CONFIGURATOR_REVISION()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolAddressesProvider(overrides?: CallOverrides): Promise<string>;

    "poolAddressesProvider()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      _poolAddressesProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address)"(
      _poolAddressesProvider: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * initializes a reserve
     * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
     * @param _reserve the address of the reserve to be initialized
     * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
     */
    initReserve(
      _reserve: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * initializes a reserve
     * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
     * @param _reserve the address of the reserve to be initialized
     * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
     */
    "initReserve(address,uint8,address)"(
      _reserve: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * initializes a reserve using aTokenData provided externally (useful if the underlying ERC20 contract doesn't expose name or decimals)
     * @param _aTokenName the name of the aToken contract
     * @param _aTokenSymbol the symbol of the aToken contract
     * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
     * @param _reserve the address of the reserve to be initialized
     * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
     */
    initReserveWithData(
      _reserve: string,
      _aTokenName: string,
      _aTokenSymbol: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * initializes a reserve using aTokenData provided externally (useful if the underlying ERC20 contract doesn't expose name or decimals)
     * @param _aTokenName the name of the aToken contract
     * @param _aTokenSymbol the symbol of the aToken contract
     * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
     * @param _reserve the address of the reserve to be initialized
     * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
     */
    "initReserveWithData(address,string,string,uint8,address)"(
      _reserve: string,
      _aTokenName: string,
      _aTokenSymbol: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * removes the last added reserve in the list of the reserves
     * @param _reserveToRemove the address of the reserve*
     */
    removeLastAddedReserve(
      _reserveToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * removes the last added reserve in the list of the reserves
     * @param _reserveToRemove the address of the reserve*
     */
    "removeLastAddedReserve(address)"(
      _reserveToRemove: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * enables borrowing on a reserve
     * @param _reserve the address of the reserve
     * @param _stableBorrowRateEnabled true if stable borrow rate needs to be enabled by default on this reserve*
     */
    enableBorrowingOnReserve(
      _reserve: string,
      _stableBorrowRateEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * enables borrowing on a reserve
     * @param _reserve the address of the reserve
     * @param _stableBorrowRateEnabled true if stable borrow rate needs to be enabled by default on this reserve*
     */
    "enableBorrowingOnReserve(address,bool)"(
      _reserve: string,
      _stableBorrowRateEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * disables borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    disableBorrowingOnReserve(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * disables borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    "disableBorrowingOnReserve(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * enables a reserve to be used as collateral
     * @param _baseLTVasCollateral the loan to value of the asset when used as collateral
     * @param _liquidationBonus the bonus liquidators receive to liquidate this asset*
     * @param _liquidationThreshold the threshold at which loans using this asset as collateral will be considered undercollateralized
     * @param _reserve the address of the reserve
     */
    enableReserveAsCollateral(
      _reserve: string,
      _baseLTVasCollateral: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _liquidationBonus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * enables a reserve to be used as collateral
     * @param _baseLTVasCollateral the loan to value of the asset when used as collateral
     * @param _liquidationBonus the bonus liquidators receive to liquidate this asset*
     * @param _liquidationThreshold the threshold at which loans using this asset as collateral will be considered undercollateralized
     * @param _reserve the address of the reserve
     */
    "enableReserveAsCollateral(address,uint256,uint256,uint256)"(
      _reserve: string,
      _baseLTVasCollateral: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _liquidationBonus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * disables a reserve as collateral
     * @param _reserve the address of the reserve*
     */
    disableReserveAsCollateral(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * disables a reserve as collateral
     * @param _reserve the address of the reserve*
     */
    "disableReserveAsCollateral(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * enable stable rate borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    enableReserveStableBorrowRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * enable stable rate borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    "enableReserveStableBorrowRate(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * disable stable rate borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    disableReserveStableBorrowRate(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * disable stable rate borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    "disableReserveStableBorrowRate(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * activates a reserve
     * @param _reserve the address of the reserve*
     */
    activateReserve(_reserve: string, overrides?: CallOverrides): Promise<void>;

    /**
     * activates a reserve
     * @param _reserve the address of the reserve*
     */
    "activateReserve(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * deactivates a reserve
     * @param _reserve the address of the reserve*
     */
    deactivateReserve(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * deactivates a reserve
     * @param _reserve the address of the reserve*
     */
    "deactivateReserve(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * freezes a reserve. A freezed reserve doesn't accept any new deposit, borrow or rate swap, but can accept repayments, liquidations, rate rebalances and redeems
     * @param _reserve the address of the reserve*
     */
    freezeReserve(_reserve: string, overrides?: CallOverrides): Promise<void>;

    /**
     * freezes a reserve. A freezed reserve doesn't accept any new deposit, borrow or rate swap, but can accept repayments, liquidations, rate rebalances and redeems
     * @param _reserve the address of the reserve*
     */
    "freezeReserve(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * unfreezes a reserve
     * @param _reserve the address of the reserve*
     */
    unfreezeReserve(_reserve: string, overrides?: CallOverrides): Promise<void>;

    /**
     * unfreezes a reserve
     * @param _reserve the address of the reserve*
     */
    "unfreezeReserve(address)"(
      _reserve: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * emitted when a reserve loan to value is updated
     * @param _ltv the new value for the loan to value*
     * @param _reserve the address of the reserve
     */
    setReserveBaseLTVasCollateral(
      _reserve: string,
      _ltv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * emitted when a reserve loan to value is updated
     * @param _ltv the new value for the loan to value*
     * @param _reserve the address of the reserve
     */
    "setReserveBaseLTVasCollateral(address,uint256)"(
      _reserve: string,
      _ltv: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * updates the liquidation threshold of a reserve.
     * @param _reserve the address of the reserve
     * @param _threshold the new value for the liquidation threshold*
     */
    setReserveLiquidationThreshold(
      _reserve: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * updates the liquidation threshold of a reserve.
     * @param _reserve the address of the reserve
     * @param _threshold the new value for the liquidation threshold*
     */
    "setReserveLiquidationThreshold(address,uint256)"(
      _reserve: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * updates the liquidation bonus of a reserve
     * @param _bonus the new value for the liquidation bonus*
     * @param _reserve the address of the reserve
     */
    setReserveLiquidationBonus(
      _reserve: string,
      _bonus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * updates the liquidation bonus of a reserve
     * @param _bonus the new value for the liquidation bonus*
     * @param _reserve the address of the reserve
     */
    "setReserveLiquidationBonus(address,uint256)"(
      _reserve: string,
      _bonus: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * updates the reserve decimals
     * @param _decimals the new number of decimals*
     * @param _reserve the address of the reserve
     */
    setReserveDecimals(
      _reserve: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * updates the reserve decimals
     * @param _decimals the new number of decimals*
     * @param _reserve the address of the reserve
     */
    "setReserveDecimals(address,uint256)"(
      _reserve: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * sets the interest rate strategy of a reserve
     * @param _rateStrategyAddress the new address of the interest strategy contract*
     * @param _reserve the address of the reserve
     */
    setReserveInterestRateStrategyAddress(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * sets the interest rate strategy of a reserve
     * @param _rateStrategyAddress the new address of the interest strategy contract*
     * @param _reserve the address of the reserve
     */
    "setReserveInterestRateStrategyAddress(address,address)"(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * refreshes the lending pool core configuration to update the cached address*
     */
    refreshLendingPoolCoreConfiguration(
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * refreshes the lending pool core configuration to update the cached address*
     */
    "refreshLendingPoolCoreConfiguration()"(
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    BorrowingDisabledOnReserve(_reserve: string | null): EventFilter;

    BorrowingEnabledOnReserve(
      _reserve: null,
      _stableRateEnabled: null
    ): EventFilter;

    ReserveActivated(_reserve: string | null): EventFilter;

    ReserveBaseLtvChanged(_reserve: null, _ltv: null): EventFilter;

    ReserveDeactivated(_reserve: string | null): EventFilter;

    ReserveDecimalsChanged(_reserve: null, _decimals: null): EventFilter;

    ReserveDisabledAsCollateral(_reserve: string | null): EventFilter;

    ReserveEnabledAsCollateral(
      _reserve: string | null,
      _ltv: null,
      _liquidationThreshold: null,
      _liquidationBonus: null
    ): EventFilter;

    ReserveFreezed(_reserve: string | null): EventFilter;

    ReserveInitialized(
      _reserve: string | null,
      _aToken: string | null,
      _interestRateStrategyAddress: null
    ): EventFilter;

    ReserveInterestRateStrategyChanged(
      _reserve: null,
      _strategy: null
    ): EventFilter;

    ReserveLiquidationBonusChanged(_reserve: null, _bonus: null): EventFilter;

    ReserveLiquidationThresholdChanged(
      _reserve: null,
      _threshold: null
    ): EventFilter;

    ReserveRemoved(_reserve: string | null): EventFilter;

    ReserveUnfreezed(_reserve: string | null): EventFilter;

    StableRateDisabledOnReserve(_reserve: string | null): EventFilter;

    StableRateEnabledOnReserve(_reserve: string | null): EventFilter;
  };

  estimateGas: {
    CONFIGURATOR_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    "CONFIGURATOR_REVISION()"(overrides?: CallOverrides): Promise<BigNumber>;

    poolAddressesProvider(overrides?: CallOverrides): Promise<BigNumber>;

    "poolAddressesProvider()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _poolAddressesProvider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address)"(
      _poolAddressesProvider: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * initializes a reserve
     * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
     * @param _reserve the address of the reserve to be initialized
     * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
     */
    initReserve(
      _reserve: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * initializes a reserve
     * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
     * @param _reserve the address of the reserve to be initialized
     * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
     */
    "initReserve(address,uint8,address)"(
      _reserve: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * initializes a reserve using aTokenData provided externally (useful if the underlying ERC20 contract doesn't expose name or decimals)
     * @param _aTokenName the name of the aToken contract
     * @param _aTokenSymbol the symbol of the aToken contract
     * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
     * @param _reserve the address of the reserve to be initialized
     * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
     */
    initReserveWithData(
      _reserve: string,
      _aTokenName: string,
      _aTokenSymbol: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * initializes a reserve using aTokenData provided externally (useful if the underlying ERC20 contract doesn't expose name or decimals)
     * @param _aTokenName the name of the aToken contract
     * @param _aTokenSymbol the symbol of the aToken contract
     * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
     * @param _reserve the address of the reserve to be initialized
     * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
     */
    "initReserveWithData(address,string,string,uint8,address)"(
      _reserve: string,
      _aTokenName: string,
      _aTokenSymbol: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * removes the last added reserve in the list of the reserves
     * @param _reserveToRemove the address of the reserve*
     */
    removeLastAddedReserve(
      _reserveToRemove: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * removes the last added reserve in the list of the reserves
     * @param _reserveToRemove the address of the reserve*
     */
    "removeLastAddedReserve(address)"(
      _reserveToRemove: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * enables borrowing on a reserve
     * @param _reserve the address of the reserve
     * @param _stableBorrowRateEnabled true if stable borrow rate needs to be enabled by default on this reserve*
     */
    enableBorrowingOnReserve(
      _reserve: string,
      _stableBorrowRateEnabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * enables borrowing on a reserve
     * @param _reserve the address of the reserve
     * @param _stableBorrowRateEnabled true if stable borrow rate needs to be enabled by default on this reserve*
     */
    "enableBorrowingOnReserve(address,bool)"(
      _reserve: string,
      _stableBorrowRateEnabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * disables borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    disableBorrowingOnReserve(
      _reserve: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * disables borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    "disableBorrowingOnReserve(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * enables a reserve to be used as collateral
     * @param _baseLTVasCollateral the loan to value of the asset when used as collateral
     * @param _liquidationBonus the bonus liquidators receive to liquidate this asset*
     * @param _liquidationThreshold the threshold at which loans using this asset as collateral will be considered undercollateralized
     * @param _reserve the address of the reserve
     */
    enableReserveAsCollateral(
      _reserve: string,
      _baseLTVasCollateral: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _liquidationBonus: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * enables a reserve to be used as collateral
     * @param _baseLTVasCollateral the loan to value of the asset when used as collateral
     * @param _liquidationBonus the bonus liquidators receive to liquidate this asset*
     * @param _liquidationThreshold the threshold at which loans using this asset as collateral will be considered undercollateralized
     * @param _reserve the address of the reserve
     */
    "enableReserveAsCollateral(address,uint256,uint256,uint256)"(
      _reserve: string,
      _baseLTVasCollateral: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _liquidationBonus: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * disables a reserve as collateral
     * @param _reserve the address of the reserve*
     */
    disableReserveAsCollateral(
      _reserve: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * disables a reserve as collateral
     * @param _reserve the address of the reserve*
     */
    "disableReserveAsCollateral(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * enable stable rate borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    enableReserveStableBorrowRate(
      _reserve: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * enable stable rate borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    "enableReserveStableBorrowRate(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * disable stable rate borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    disableReserveStableBorrowRate(
      _reserve: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * disable stable rate borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    "disableReserveStableBorrowRate(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * activates a reserve
     * @param _reserve the address of the reserve*
     */
    activateReserve(
      _reserve: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * activates a reserve
     * @param _reserve the address of the reserve*
     */
    "activateReserve(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * deactivates a reserve
     * @param _reserve the address of the reserve*
     */
    deactivateReserve(
      _reserve: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * deactivates a reserve
     * @param _reserve the address of the reserve*
     */
    "deactivateReserve(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * freezes a reserve. A freezed reserve doesn't accept any new deposit, borrow or rate swap, but can accept repayments, liquidations, rate rebalances and redeems
     * @param _reserve the address of the reserve*
     */
    freezeReserve(_reserve: string, overrides?: Overrides): Promise<BigNumber>;

    /**
     * freezes a reserve. A freezed reserve doesn't accept any new deposit, borrow or rate swap, but can accept repayments, liquidations, rate rebalances and redeems
     * @param _reserve the address of the reserve*
     */
    "freezeReserve(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * unfreezes a reserve
     * @param _reserve the address of the reserve*
     */
    unfreezeReserve(
      _reserve: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * unfreezes a reserve
     * @param _reserve the address of the reserve*
     */
    "unfreezeReserve(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * emitted when a reserve loan to value is updated
     * @param _ltv the new value for the loan to value*
     * @param _reserve the address of the reserve
     */
    setReserveBaseLTVasCollateral(
      _reserve: string,
      _ltv: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * emitted when a reserve loan to value is updated
     * @param _ltv the new value for the loan to value*
     * @param _reserve the address of the reserve
     */
    "setReserveBaseLTVasCollateral(address,uint256)"(
      _reserve: string,
      _ltv: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * updates the liquidation threshold of a reserve.
     * @param _reserve the address of the reserve
     * @param _threshold the new value for the liquidation threshold*
     */
    setReserveLiquidationThreshold(
      _reserve: string,
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * updates the liquidation threshold of a reserve.
     * @param _reserve the address of the reserve
     * @param _threshold the new value for the liquidation threshold*
     */
    "setReserveLiquidationThreshold(address,uint256)"(
      _reserve: string,
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * updates the liquidation bonus of a reserve
     * @param _bonus the new value for the liquidation bonus*
     * @param _reserve the address of the reserve
     */
    setReserveLiquidationBonus(
      _reserve: string,
      _bonus: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * updates the liquidation bonus of a reserve
     * @param _bonus the new value for the liquidation bonus*
     * @param _reserve the address of the reserve
     */
    "setReserveLiquidationBonus(address,uint256)"(
      _reserve: string,
      _bonus: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * updates the reserve decimals
     * @param _decimals the new number of decimals*
     * @param _reserve the address of the reserve
     */
    setReserveDecimals(
      _reserve: string,
      _decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * updates the reserve decimals
     * @param _decimals the new number of decimals*
     * @param _reserve the address of the reserve
     */
    "setReserveDecimals(address,uint256)"(
      _reserve: string,
      _decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * sets the interest rate strategy of a reserve
     * @param _rateStrategyAddress the new address of the interest strategy contract*
     * @param _reserve the address of the reserve
     */
    setReserveInterestRateStrategyAddress(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * sets the interest rate strategy of a reserve
     * @param _rateStrategyAddress the new address of the interest strategy contract*
     * @param _reserve the address of the reserve
     */
    "setReserveInterestRateStrategyAddress(address,address)"(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * refreshes the lending pool core configuration to update the cached address*
     */
    refreshLendingPoolCoreConfiguration(
      overrides?: Overrides
    ): Promise<BigNumber>;

    /**
     * refreshes the lending pool core configuration to update the cached address*
     */
    "refreshLendingPoolCoreConfiguration()"(
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CONFIGURATOR_REVISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CONFIGURATOR_REVISION()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolAddressesProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolAddressesProvider()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _poolAddressesProvider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _poolAddressesProvider: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * initializes a reserve
     * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
     * @param _reserve the address of the reserve to be initialized
     * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
     */
    initReserve(
      _reserve: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * initializes a reserve
     * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
     * @param _reserve the address of the reserve to be initialized
     * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
     */
    "initReserve(address,uint8,address)"(
      _reserve: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * initializes a reserve using aTokenData provided externally (useful if the underlying ERC20 contract doesn't expose name or decimals)
     * @param _aTokenName the name of the aToken contract
     * @param _aTokenSymbol the symbol of the aToken contract
     * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
     * @param _reserve the address of the reserve to be initialized
     * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
     */
    initReserveWithData(
      _reserve: string,
      _aTokenName: string,
      _aTokenSymbol: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * initializes a reserve using aTokenData provided externally (useful if the underlying ERC20 contract doesn't expose name or decimals)
     * @param _aTokenName the name of the aToken contract
     * @param _aTokenSymbol the symbol of the aToken contract
     * @param _interestRateStrategyAddress the address of the interest rate strategy contract for this reserve*
     * @param _reserve the address of the reserve to be initialized
     * @param _underlyingAssetDecimals the decimals of the reserve underlying asset
     */
    "initReserveWithData(address,string,string,uint8,address)"(
      _reserve: string,
      _aTokenName: string,
      _aTokenSymbol: string,
      _underlyingAssetDecimals: BigNumberish,
      _interestRateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * removes the last added reserve in the list of the reserves
     * @param _reserveToRemove the address of the reserve*
     */
    removeLastAddedReserve(
      _reserveToRemove: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * removes the last added reserve in the list of the reserves
     * @param _reserveToRemove the address of the reserve*
     */
    "removeLastAddedReserve(address)"(
      _reserveToRemove: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * enables borrowing on a reserve
     * @param _reserve the address of the reserve
     * @param _stableBorrowRateEnabled true if stable borrow rate needs to be enabled by default on this reserve*
     */
    enableBorrowingOnReserve(
      _reserve: string,
      _stableBorrowRateEnabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * enables borrowing on a reserve
     * @param _reserve the address of the reserve
     * @param _stableBorrowRateEnabled true if stable borrow rate needs to be enabled by default on this reserve*
     */
    "enableBorrowingOnReserve(address,bool)"(
      _reserve: string,
      _stableBorrowRateEnabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * disables borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    disableBorrowingOnReserve(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * disables borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    "disableBorrowingOnReserve(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * enables a reserve to be used as collateral
     * @param _baseLTVasCollateral the loan to value of the asset when used as collateral
     * @param _liquidationBonus the bonus liquidators receive to liquidate this asset*
     * @param _liquidationThreshold the threshold at which loans using this asset as collateral will be considered undercollateralized
     * @param _reserve the address of the reserve
     */
    enableReserveAsCollateral(
      _reserve: string,
      _baseLTVasCollateral: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _liquidationBonus: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * enables a reserve to be used as collateral
     * @param _baseLTVasCollateral the loan to value of the asset when used as collateral
     * @param _liquidationBonus the bonus liquidators receive to liquidate this asset*
     * @param _liquidationThreshold the threshold at which loans using this asset as collateral will be considered undercollateralized
     * @param _reserve the address of the reserve
     */
    "enableReserveAsCollateral(address,uint256,uint256,uint256)"(
      _reserve: string,
      _baseLTVasCollateral: BigNumberish,
      _liquidationThreshold: BigNumberish,
      _liquidationBonus: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * disables a reserve as collateral
     * @param _reserve the address of the reserve*
     */
    disableReserveAsCollateral(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * disables a reserve as collateral
     * @param _reserve the address of the reserve*
     */
    "disableReserveAsCollateral(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * enable stable rate borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    enableReserveStableBorrowRate(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * enable stable rate borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    "enableReserveStableBorrowRate(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * disable stable rate borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    disableReserveStableBorrowRate(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * disable stable rate borrowing on a reserve
     * @param _reserve the address of the reserve*
     */
    "disableReserveStableBorrowRate(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * activates a reserve
     * @param _reserve the address of the reserve*
     */
    activateReserve(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * activates a reserve
     * @param _reserve the address of the reserve*
     */
    "activateReserve(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * deactivates a reserve
     * @param _reserve the address of the reserve*
     */
    deactivateReserve(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * deactivates a reserve
     * @param _reserve the address of the reserve*
     */
    "deactivateReserve(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * freezes a reserve. A freezed reserve doesn't accept any new deposit, borrow or rate swap, but can accept repayments, liquidations, rate rebalances and redeems
     * @param _reserve the address of the reserve*
     */
    freezeReserve(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * freezes a reserve. A freezed reserve doesn't accept any new deposit, borrow or rate swap, but can accept repayments, liquidations, rate rebalances and redeems
     * @param _reserve the address of the reserve*
     */
    "freezeReserve(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * unfreezes a reserve
     * @param _reserve the address of the reserve*
     */
    unfreezeReserve(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * unfreezes a reserve
     * @param _reserve the address of the reserve*
     */
    "unfreezeReserve(address)"(
      _reserve: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * emitted when a reserve loan to value is updated
     * @param _ltv the new value for the loan to value*
     * @param _reserve the address of the reserve
     */
    setReserveBaseLTVasCollateral(
      _reserve: string,
      _ltv: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * emitted when a reserve loan to value is updated
     * @param _ltv the new value for the loan to value*
     * @param _reserve the address of the reserve
     */
    "setReserveBaseLTVasCollateral(address,uint256)"(
      _reserve: string,
      _ltv: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the liquidation threshold of a reserve.
     * @param _reserve the address of the reserve
     * @param _threshold the new value for the liquidation threshold*
     */
    setReserveLiquidationThreshold(
      _reserve: string,
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the liquidation threshold of a reserve.
     * @param _reserve the address of the reserve
     * @param _threshold the new value for the liquidation threshold*
     */
    "setReserveLiquidationThreshold(address,uint256)"(
      _reserve: string,
      _threshold: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the liquidation bonus of a reserve
     * @param _bonus the new value for the liquidation bonus*
     * @param _reserve the address of the reserve
     */
    setReserveLiquidationBonus(
      _reserve: string,
      _bonus: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the liquidation bonus of a reserve
     * @param _bonus the new value for the liquidation bonus*
     * @param _reserve the address of the reserve
     */
    "setReserveLiquidationBonus(address,uint256)"(
      _reserve: string,
      _bonus: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the reserve decimals
     * @param _decimals the new number of decimals*
     * @param _reserve the address of the reserve
     */
    setReserveDecimals(
      _reserve: string,
      _decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * updates the reserve decimals
     * @param _decimals the new number of decimals*
     * @param _reserve the address of the reserve
     */
    "setReserveDecimals(address,uint256)"(
      _reserve: string,
      _decimals: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * sets the interest rate strategy of a reserve
     * @param _rateStrategyAddress the new address of the interest strategy contract*
     * @param _reserve the address of the reserve
     */
    setReserveInterestRateStrategyAddress(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * sets the interest rate strategy of a reserve
     * @param _rateStrategyAddress the new address of the interest strategy contract*
     * @param _reserve the address of the reserve
     */
    "setReserveInterestRateStrategyAddress(address,address)"(
      _reserve: string,
      _rateStrategyAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * refreshes the lending pool core configuration to update the cached address*
     */
    refreshLendingPoolCoreConfiguration(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    /**
     * refreshes the lending pool core configuration to update the cached address*
     */
    "refreshLendingPoolCoreConfiguration()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
